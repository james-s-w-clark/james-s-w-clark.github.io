<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>James' Digital Garden</title><link>https://james-s-w-clark.github.io/</link><description>Recent content on James' Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>James Clark Â©</copyright><lastBuildDate>Fri, 21 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://james-s-w-clark.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>RTX ON - it's execution time</title><status>evergreen</status><link>https://james-s-w-clark.github.io/garden/rtx-asdf/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/rtx-asdf/</guid><description>&lt;p>I&amp;rsquo;ve been using previously used &lt;code>sdkman&lt;/code> for a few years to manage my JDK &amp;amp; Scala installations. It supports a good amount of tooling, but it&amp;rsquo;s very JVM focused. You may know &lt;code>nvm&lt;/code> or &lt;code>n&lt;/code> for managing and switching Node versions, or Volta/fnm for more general Javascript tooling management.&lt;/p>
&lt;p>Recently I&amp;rsquo;ve been getting into Elixir &amp;amp; Phoenix LiveView, and I came across a similar tool called &lt;code>asdf&lt;/code>. Actually though, thanks to its &amp;ldquo;plugins&amp;rdquo; system and almost 700 plugins, you can install so many different tools. Sounds good to me - I have projects using Python, Elixir, Java/Scala, Node, Terraform, AWS CLI, etc.. With one application, I can have tooling defined locally (per-project) so it&amp;rsquo;s all independent and easy to get the tooling right.&lt;/p>
&lt;p>This was working great for Elixir &amp;amp; Erlang, but the ergonomics felt a little off. In order to list versions, you have to first download the plugin. And due to its &amp;ldquo;shim&amp;rdquo; mechanism, it adds about 100ms delay to each command that passes through the asdf executable (my ELI5 understanding).&lt;/p>
&lt;p>I then came across &lt;a href="https://github.com/jdxcode/rtx">rtx&lt;/a>, a Rust tool inspired by &lt;code>asdf&lt;/code> that takes a different approach. Here&amp;rsquo;s some features I&amp;rsquo;m really liking:&lt;/p>
&lt;ul>
&lt;li>Speed - &lt;code>rtx&lt;/code> points to tooling versions via the PATH, and updates the PATH when necessary - this keeps interactions fast (it doesn&amp;rsquo;t go through a &amp;ldquo;shim&amp;rdquo; unless it has to, unlike &lt;code>asdf&lt;/code>)
&lt;ul>
&lt;li>Also, apparently &lt;code>python&lt;/code> called via &lt;code>rtx&lt;/code> is much more response than &lt;code>python&lt;/code> with &lt;code>pyenv&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Installs - If you have a bunch of microservices on different Node/Java versions, &lt;code>rtx&lt;/code> reloads the relevant version via the PATH when you switch project in your terminal. You don&amp;rsquo;t need to run commands like &lt;code>nvm use node 16&lt;/code> - it&amp;rsquo;s automatic. Global installs are supported too.&lt;/li>
&lt;li>Plugins - &lt;code>asdf&lt;/code>&amp;rsquo;s amazing plugins are here still, but you don&amp;rsquo;t have to explicltly install them first!
&lt;ul>
&lt;li>&lt;code>rtx&lt;/code> does have it&amp;rsquo;s own plugins, but &amp;lt;10 at the time of writing. Re-using asdf&amp;rsquo;s plugins is smart&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Documentation - the CLI &amp;amp; interactions are friendly, and setup is (almost) frictionless&lt;/li>
&lt;li>Configuration - &lt;code>.rtx.toml&lt;/code> and the CLI interactions with it are easy to use, and really powerful - see below!&lt;/li>
&lt;/ul>
&lt;h1 id="show-me-the-config">Show me the config&lt;/h1>
&lt;p>For our documentation website, I suggested we move from install nvm/node/yarn/sbt to just this configuration file (.rtx.toml):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#75af00">tools&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">node&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">yarn&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;1.22.19&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">sbt&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;1.9.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and this one-click script (in IntelliJ) to go from 0 to READY:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>curl https://rtx.pub/install.sh &lt;span style="color:#111">|&lt;/span> sh &lt;span style="color:#75715e"># install rtx &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#39;eval &amp;#34;$(~/bin/rtx activate zsh)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#75715e"># hook rtx into shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rtx install &lt;span style="color:#75715e"># install tooling&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn &lt;span style="color:#75715e"># install deps &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn run &lt;span style="color:#75715e"># launch dev website&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s a nice developer experience. I&amp;rsquo;m happy to know someone can clone a repo, click a button, grab a drink, and come back to a website!&lt;/p>
&lt;hr>
&lt;h1 id="ci---does-it-add-value-here">CI - does it add value here?&lt;/h1>
&lt;p>So, &lt;code>rtx&lt;/code> is pretty cool for local development - but what about CI?&lt;/p>
&lt;p>For our main project, we use a JDK, Scala, and Mill.
There&amp;rsquo;s a few Actions for setup (setup-java, coursier-setup, mill-setup, etc.) - but they usually want a version typing out. This could lead to drift between development and CI, and introduce a bit of toil when somebody finally notices or remembers.&lt;/p>
&lt;p>&lt;a href="https://github.com/actions/setup-java">setup-java&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/setup-java@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">distribution&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#d88200">&amp;#39;openjdk&amp;#39;&lt;/span> &lt;span style="color:#75715e"># See &amp;#39;Supported distributions&amp;#39; for available options&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">java-version&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#d88200">&amp;#39;17&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But it&amp;rsquo;d be nice if we could set up more, with less lines right? See &lt;a href="https://github.com/coursier/setup-action">Coursier&amp;rsquo;s setup-action&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">coursier/setup-action@v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">jvm&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">adopt:17&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apps&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">sbtn bloop ammonite&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ah, so it seems the versions can&amp;rsquo;t be specified (other than for the jvm).&lt;/p>
&lt;p>With the &lt;a href="https://github.com/marketplace/actions/rtx-action">rtx Action&lt;/a>, our &lt;code>.rtx.toml&lt;/code> files can be used - which is accurate, and brief:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">jdxcode/rtx-action@v1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I ran &lt;a href="https://github.com/IdiosApps/havvk/blob/master/.github/workflows/rtx-action-check.yml">this&lt;/a> as a workflow dispatch. The first run took 3m36s (it takes a while locally to install Elixir &amp;amp; Erlang too), but &lt;a href="https://github.com/IdiosApps/havvk/actions/runs/5627022179/job/15248908167">the second run (started soon after) took only 20 seconds&lt;/a>! GitHub Actions seems to have nicely cached the worker for my &lt;code>master&lt;/code> branch (270MB total). Apparently there&amp;rsquo;s a &lt;a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">10GB total limit&lt;/a> - though I can&amp;rsquo;t see how long it lasts. That&amp;rsquo;s cool though - our action &lt;em>just works&lt;/em> in CI, is super clean, and in Public GitHub they help us keep things fast with zero-configuration caches!&lt;/p>
&lt;h1 id="-but-my-versions-for-different-tools-are-scattered-around-my-source">&amp;hellip; but my versions for different tools are scattered around my source!&lt;/h1>
&lt;p>Let&amp;rsquo;s say you use three tools, which are specified in different files:&lt;/p>
&lt;ul>
&lt;li>openjdk-17 - in a Dockerfile&lt;/li>
&lt;li>Scala 2.13.xy - in a Dependencies.sc file&lt;/li>
&lt;li>mill - in .mill-version&lt;/li>
&lt;/ul>
&lt;p>Fortunately, &lt;code>rtx&lt;/code> uses the &lt;code>tera&lt;/code> templating engine so we can grab these dynamically.
These commands are kinda grim (I couldn&amp;rsquo;t use &amp;quot; or &amp;lsquo;; I found &lt;code>cut&lt;/code> to be a good command, thanks ChatGPT), but are probably &amp;ldquo;good enough&amp;rdquo; to not need updating. The sources they read won&amp;rsquo;t be changing spacing much:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#75af00">tools&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">mill&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#111">{&lt;/span> &lt;span style="color:#75af00">version&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;{{exec(command=&amp;#39;echo $(cat .mill-version)&amp;#39;)}}&amp;#34;&lt;/span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">java&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#111">{&lt;/span> &lt;span style="color:#75af00">version&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;{{exec(command=&amp;#39;grep -m 1 openjdk docker/Dockerfile | cut -c 12- | tr : -&amp;#39;)}}&amp;#34;&lt;/span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">scala&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#111">{&lt;/span> &lt;span style="color:#75af00">version&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;{{exec(command=&amp;#39;grep -m 1 2.13 dependencies/Dependencies.sc | cut -c 33-39&amp;#39;)}}&amp;#34;&lt;/span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The secret sauce here is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>grep -m 1 &amp;lt;phrase&amp;gt;&lt;/code> returns the first line that matches&lt;/li>
&lt;li>&lt;code>cut 12-&lt;/code> gives from the 12th char onwards, &lt;code>cut 33-39&lt;/code> does what you&amp;rsquo;d think&lt;/li>
&lt;/ul>
&lt;p>Yep, it does look dumb, but:&lt;/p>
&lt;ul>
&lt;li>For Java we just pin to a major version; if we stick to the same vendor, there&amp;rsquo;ll be no issue&lt;/li>
&lt;li>For Mill, it&amp;rsquo;s just a plain cat. Not too bad :)&lt;/li>
&lt;li>For Scala, until there&amp;rsquo;s a migration to Scala 3 then we&amp;rsquo;ll just see 2.13.11 -&amp;gt; 2.13.xy&lt;/li>
&lt;/ul>
&lt;h1 id="additions--alternatives">Additions &amp;amp; Alternatives&lt;/h1>
&lt;ul>
&lt;li>For &lt;code>asdf&lt;/code>, there is &lt;a href="https://github.com/mhanberg/lazyasdf">lazyasdf&lt;/a> - it&amp;rsquo;s a TUI for &lt;code>asdf&lt;/code> (like how k9s is a TUI for k8s)&lt;/li>
&lt;li>An alternative to &lt;code>asdf&lt;/code>/&lt;code>rtx&lt;/code> is &lt;a href="https://github.com/aquaproj/aqua">aqua&lt;/a>, written in Go. The local configuration (like .rtx.toml) is aqua.yaml, and it supports global installs too
&lt;ul>
&lt;li>The &lt;a href="https://github.com/aquaproj/aqua-registry/tree/main/pkgs">Aqua registry&lt;/a> has gives 1200+ results - but I see nothing for Elixir, Java/JDK/JVM, and the only node result is &amp;ldquo;kubectl-node-shell&amp;rdquo;&lt;/li>
&lt;li>The fzf-esque interactive search for packages with &lt;code>aqua g&lt;/code> is nice, even if I can&amp;rsquo;t find what I want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="whats-bad-about-rtx-security">What&amp;rsquo;s bad about rtx (security)?&lt;/h1>
&lt;p>There&amp;rsquo;s a good &lt;a href="https://github.com/jdxcode/rtx/blob/main/SECURITY.md">security write-up on the rtx repo&lt;/a>.&lt;/p>
&lt;p>As you can see, with Tera templating you can run some arbitrary commands (firstly in PRs/GitHub Actions, then locally if a change is merged). There is a command &lt;a href="https://github.com/jdxcode/rtx#rtx-trust-options-config_file">rtx trust&lt;/a>, meaning &amp;ldquo;rtx will parse the file with potentially dangerous
features enabled&amp;rdquo; - I guess that&amp;rsquo;d be useful if you clone some OSS repo and don&amp;rsquo;t want the tooling. There&amp;rsquo;s also configuration via environment variables, e.g. &lt;a href="https://github.com/jdxcode/rtx#rtx_trusted_config_paths">RTX_TRUSTED_CONFIG_PATHS&lt;/a> that may be useful.&lt;/p>
&lt;p>Even tools like &lt;a href="https://github.com/IdiosApps/dependabot-gradlewrapper-test#what-are-some-problems-with-the-gradle-wrapper">gradlew have risks&lt;/a> though, and that&amp;rsquo;s massively popular.&lt;/p>
&lt;p>To answer &amp;ldquo;can/should I use rtx?&amp;rdquo;, at this point you need to do your own homework ;)&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I encourage you to give &lt;a href="https://github.com/jdxcode/rtx">rtx&lt;/a> a try. It&amp;rsquo;ll be my tooling manager of choice for personal projects now, and I&amp;rsquo;m encourgaging its use at work. So far I&amp;rsquo;m using it in a backend JVM repo, a yarn/node documentation repo, and an Elixir/Erlang repo.&lt;/p></description></item><item><title>Career - Disney Streaming - What I Done</title><status>seeding</status><link>https://james-s-w-clark.github.io/garden/disney-what-i-done/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/disney-what-i-done/</guid><description>&lt;p>Outside of usual sprint project work (Scala Functional Programming microservices), I enjoyed dabbling with different bits of tech and ideas (mostly tech/way of working related) in my time at Disney Streaming so far!&lt;/p>
&lt;h1 id="migrating-our-team-to-kubernetes">Migrating our team to Kubernetes&lt;/h1>
&lt;p>We were running our applications on a bespoke ECS-like platform - which worked fairly well, apart from deployments regularly failing due to nodes being too small to fit pods onto. It has health checks, self-healing properties, etc. like Kubernetes - but you can&amp;rsquo;t easily &lt;code>ssh&lt;/code> into pods even in non-prod environments easily. There&amp;rsquo;s more reasons for the move, but basically there&amp;rsquo;s a company-wide effort to move to EKS.&lt;/p>
&lt;p>I loved using Kubernetes (with k9s!) at Sainsbury&amp;rsquo;s, so I volunteered to lead this migration project for our team. Here&amp;rsquo;s some things I learned whilst leading this:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A shared knowledge base such as Google Docs works great. We captured key meeting notes, decisions, diagrams, etc. here.&lt;/p>
&lt;ul>
&lt;li>Anyone can get up to speed quickly&lt;/li>
&lt;li>Easy to ask questions, add comments&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Creating a &amp;ldquo;team training Slack channel&amp;rdquo; for a new tech domain works great&lt;/p>
&lt;ul>
&lt;li>As you work through the training, questions, problems, and solutions crystallise&lt;/li>
&lt;li>All information is contained neatly in the channel, not spread all over various places
&lt;ul>
&lt;li>It&amp;rsquo;s easier to collate key points and give feedback to the course owners&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You can expand the channel beyond just your team, sharing the benefits&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>For real-time knowledge sharing, encourage various people to take tickets on the work. Pair with them for smooth KT&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In refinement, it can be great to call out a ticket as a pairing ticket - a &amp;ldquo;ð&amp;rdquo; emoji in the title is a nice reminder that some felt they had something new to learn from it&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I also wrote a popular internal blog post for our organisation about how to use &lt;a href="https://k9scli.io/">&lt;code>k9s&lt;/code>&lt;/a>, with specific instructions for a frictionless walk-through.&lt;/p>
&lt;h1 id="ci-jenkins">CI (Jenkins)&lt;/h1>
&lt;ul>
&lt;li>Consider adding a &amp;ldquo;notes&amp;rdquo; text parameter to some builds. Even if you don&amp;rsquo;t update the build description with this, it can be very useful to know why some builds were run (e.g. manual perf testing of a branch - what change, what is expected)&lt;/li>
&lt;li>For performance tests, put time-stamped links to observability platforms (DataDog, Grafana, etc.) in the output - it really helps the ergonomics of diagnosing any issues. Lower barrier to entry helps keep performance high!&lt;/li>
&lt;li>Be mindful of how many messages you&amp;rsquo;re sending to Slack, and where. If there&amp;rsquo;s just a little traffic, it can go to a visible team chat. If it&amp;rsquo;s noisy, it&amp;rsquo;ll probably go to a chat where people don&amp;rsquo;t look as often!&lt;/li>
&lt;li>For parameters, be explicit - say &lt;code>3600&lt;/code> for the &lt;code>default&lt;/code> seconds run time, rather than &lt;code>default&lt;/code> then loading in the number based on that string&lt;/li>
&lt;/ul>
&lt;h1 id="ci-github-actions">CI (GitHub Actions)&lt;/h1>
&lt;p>Apart from linting, auto-fixing, formatting, etc. there are some really cool things you can do with GHA and GH&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Have a fairly complex/tedious workflow for e.g. building docker images and performance testing them on a branch? Use ChatOps to listen to a command and let an Action do it for you&lt;/p>
&lt;ul>
&lt;li>It can reply with a comment, linking to the builds, perf tests, dashboards, etc.&lt;/li>
&lt;li>It can describe what process it is doing, for more explicit documentation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Use Chinthakagodawita&amp;rsquo;s &lt;a href="https://github.com/chinthakagodawita/autoupdate">autoupdate&lt;/a> action to keep PR&amp;rsquo;s up-to-date with the &lt;code>main&lt;/code> branch&lt;/p>
&lt;ul>
&lt;li>If you have &lt;code>auto merge&lt;/code> enabled, you can use the &lt;code>PR_FILTER&lt;/code> of &lt;code>auto_merge&lt;/code>
&lt;ul>
&lt;li>Done reviewing 5 PRs? Hit auto merge on them, and this will keep them merging until they&amp;rsquo;re all done!&lt;/li>
&lt;li>Without this, you&amp;rsquo;d have to wait and press &amp;ldquo;merge from main&amp;rdquo; four times. That could be like 10-30 minutes being distracted!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Open source contributions:&lt;/p>
&lt;ul>
&lt;li>Coursier&amp;rsquo;s &lt;code>setup-action&lt;/code> is &amp;ldquo;A GitHub Action to install Coursier and use it to install Java and Scala CLI tools.&amp;rdquo;. It can set up various Java verisons and distributions.
&lt;ul>
&lt;li>We use Amazon Corretto at work, and AWS. I [added Corretto to the jvm-index repo](&lt;a href="https://github.com/coursier/setup-action">https://github.com/coursier/setup-action&lt;/a> &lt;a href="https://github.com/coursier/jvm-index/blob/master/src/Corretto.scala)">https://github.com/coursier/jvm-index/blob/master/src/Corretto.scala)&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="docusaurus">Docusaurus&lt;/h1>
&lt;p>I was familiar with Hugo&amp;rsquo;s Doks static site generator, and was happy to try a new SSG here: Docusaurus.&lt;/p>
&lt;p>We were on Docusaurus 1, and we had a lot of complexity with the sidebar, document ordering, couldn&amp;rsquo;t use cool new plugins, etc. - so I was happy to simplify things and upgrade us to Docusuaurs 2. Here&amp;rsquo;s a few tips:&lt;/p>
&lt;ul>
&lt;li>Set up &lt;a href="https://github.com/marketplace/actions/deploy-pr-preview">PR preview&lt;/a>, so non-developers can see what their changes look like
&lt;ul>
&lt;li>You might need to &amp;ldquo;recreate&amp;rdquo; the Action from scratch to avoid nesting (it&amp;rsquo;s a composite action) - see &lt;a href="https://github.com/rossjrw/pr-preview-action/issues/33">this issue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Consider adding comments to your site, so people can reach out with the context directly above. &lt;a href="https://utteranc.es/">utteranc.es&lt;/a> can help with this&lt;/li>
&lt;li>Add light/dark src/css/custom.css to match the rest of your project&amp;rsquo;s branding&lt;/li>
&lt;li>For user-facing documentation, add a FAQ page. This could save a lot of time helping resolve confusion on your most common questions!&lt;/li>
&lt;li>When choosing document order, set weights like 0, 10, and 20. If you set 0, 1, and 2 then you can&amp;rsquo;t insert a document between any of them without changing many files. With the former setup, you can set &amp;ldquo;15&amp;rdquo; to get between 10 and 20.&lt;/li>
&lt;/ul>
&lt;h2 id="text-search-in-docusaurus">Text search in Docusaurus&lt;/h2>
&lt;p>I also added text search, to help our users navigate straight to what their looking for - without having to look through the structure of our sidebar. I did this as a spike for fun on a &amp;ldquo;learning Friday&amp;rdquo; - and when it was nearly ready, our users were excited for it - it was apparently quite a headache for them. Once I figured it out, it was really simple! I &lt;a href="https://github.com/cmfcmf/docusaurus-search-local/commit/f169f9acc9fd44d7963f6e732466ba6cd38e6ce9">raised documentation&lt;/a> for this to make it easier for other people to get up to speed quickly with it too.&lt;/p>
&lt;p>package.json adds e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d88200">&amp;#34;dependencies&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@cmfcmf/docusaurus-search-local&amp;#34;&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;^0.11.0&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>docusaurus.config.js adds e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">plugins&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#75af00">require&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">resolve&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;@cmfcmf/docusaurus-search-local&amp;#34;&lt;/span>&lt;span style="color:#111">)],&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To see it locally, do &lt;code>yarn build&lt;/code> and &lt;code>yarn serve&lt;/code>. These make a production-like version of your site. &lt;code>yarn run dev&lt;/code> does not integrate most of the search plugins (the search index is built on build only)&lt;/p>
&lt;p>There&amp;rsquo;s also &lt;a href="https://github.com/easyops-cn/docusaurus-search-local">https://github.com/easyops-cn/docusaurus-search-local&lt;/a> if you need it to be local/static.
Algolia is popular, but it needs a server.
See more &lt;a href="https://docusaurus.io/docs/search">in the Docusaurus docs&lt;/a>&lt;/p>
&lt;h1 id="meetings">Meetings&lt;/h1>
&lt;ul>
&lt;li>Enable closed captions
&lt;ul>
&lt;li>Having the auto-generated subtitles should be accurate enough to help some of your team follow the conversation&lt;/li>
&lt;li>If the auto-generated subtitles are garbage, you probably need to spend some budget on upgrading microphones. If the computer can&amp;rsquo;t understand you, maybe humans are having an issue too!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="calendar">Calendar&lt;/h1>
&lt;ul>
&lt;li>If a meeting is recorded, but a link to the recording in the invite. It gives a real home to the recording, rather than just a Slack message that gets lost. Helpful for people coming back from holiday/sickness - can flick through Calendar and get straight into the meetings they need to catch up on&lt;/li>
&lt;/ul>
&lt;h1 id="build-caching">Build caching&lt;/h1>
&lt;p>Compiling your apps from scratch every time is a waste of time &amp;amp; energy.
Some build tools support delta/partial compilation - if only 1 file in 1000 changed, we can base our compile around that.
GitHub Actions has a few options for caching dependencies, e.g. &lt;a href="https://github.com/actions/cache">https://github.com/actions/cache&lt;/a> or &lt;a href="https://github.com/coursier/cache-action">https://github.com/coursier/cache-action&lt;/a>. That &lt;em>could&lt;/em> help a little.
Some build tools have a remote cache - that&amp;rsquo;s great for quicker builds on CI. But, if you don&amp;rsquo;t have a remote cache - what can you do?&lt;/p>
&lt;p>Our team uses our own &lt;code>mill&lt;/code> build tool container. It already ran some basic checks to check it&amp;rsquo;d work with our project and could initialise some &amp;ldquo;workers&amp;rdquo; - but didn&amp;rsquo;t do any caching. Here&amp;rsquo;s what I did:&lt;/p>
&lt;ul>
&lt;li>Use a wrapper &lt;code>millw&lt;/code>, a bit like &lt;code>gradlew&lt;/code>. This would allow the container to build for any &lt;code>.mill-version&lt;/code>, by downloading the necessary tooling
&lt;ul>
&lt;li>If we merge a build tool upgrade in our main repo, builds would still work without requiring a manual rebuild on the new version of this image. Not technically efficient due to the redownloads of the build tool, but ultimately removing some toil in making things a little smoother for humans.&lt;/li>
&lt;li>Compile, check formatting, fixing, etc. to generate these outputs in &lt;code>out&lt;/code>, as well as downloading dependencies&lt;/li>
&lt;li>To prevent being over-written, run &lt;code>mv /root/build/out /root/out-cache&lt;/code>. In Jenkins jobs for app builds, move this cache back (if the build is parameterised with using the cache). Dependencies cache doesn&amp;rsquo;t need moving.&lt;/li>
&lt;li>The cache doesn&amp;rsquo;t have to be used. It adds some size, but storage is cheap and saved time/energy is valuable. We use it for PR builds (not &lt;code>main&lt;/code> - that&amp;rsquo;s clean), and&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The outcome of this is that, several minutes are shaved off each module (more or less, each microservice) build time. &lt;em>Faster PR compilations means faster PR checks, which means delivering value faster and reducing our mean time to recovery.&lt;/em> It also means faster builds for ChatOps triggering branch builds + perf tests, giving fast feedback on performance critical code changes!&lt;/p>
&lt;figure>&lt;img src="build-cache.webp"
alt="Can you guess which builds are using the cache?" width="100%"/>&lt;figcaption>
&lt;p>Can you guess which builds are using the cache?&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>I was pleased with doing this, as using &lt;code>deltas&lt;/code> like this has seemed awesome to me for a long time. I was amazed as a teenager when one Android custom ROM could deliver OTA updates 10x smaller than anyone else, by using deltas.&lt;/p>
&lt;h1 id="performance-tests">Performance tests&lt;/h1>
&lt;p>In your performance testing platform (we use Gatling), consider what types of test you want to have, and what should be compared:&lt;/p>
&lt;ul>
&lt;li>nightly, load (main)
&lt;ul>
&lt;li>I made them run for longer (why not? nobody is manually testing on the &lt;code>perf&lt;/code> env at 3am)&lt;/li>
&lt;li>I made them run at peak RPS for 75% of the run time (configurable). Previously, only about 20% of the time was at peak RPS. Choose a traffic shape gives your services a proper workout!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>soak (main)
&lt;ul>
&lt;li>Have seen dependencies clash and lead to slow memory leaks; soak tests protect us from this, run over the weekend&lt;/li>
&lt;li>I oversaw various performance test changes around this time after identifying improvements with the team in a post-mortem.&lt;/li>
&lt;li>Here, we basically decrease the load a little bit (75% of nightly) and run for much longer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>load (branch)
&lt;ul>
&lt;li>results could be very far from average results on &lt;code>main&lt;/code>, so have separate simulation to keep your &amp;ldquo;usually good&amp;rdquo; simulations clean&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>You can try different traffic shapes, e.g. a triangle wave over a day to simulate real traffic variety. How does your app perform as load varies?&lt;/p>
&lt;p>We previously sent the reports to Slack, with pass/fail and the targets. I added time-stamped hyperlinks to observability dashboards for ergonomics.&lt;/p>
&lt;h1 id="git-hooks">Git hooks&lt;/h1>
&lt;p>Git hooks are great - ensure your code is linted/compilable/tested before pushing.
What&amp;rsquo;s even cooler is combining them with interactive CLI tooling like &lt;code>gum&lt;/code> - see my &lt;a href="https://github.com/IdiosApps/gummy-hooks">&amp;ldquo;gummy hooks&amp;rdquo;&lt;/a> examples.&lt;/p>
&lt;ul>
&lt;li>Iterate quicker by using a bash script and just calling it - you don&amp;rsquo;t actually have to do anything with Git to iterate on it.&lt;/li>
&lt;/ul>
&lt;h1 id="scala-steward">Scala Steward&lt;/h1>
&lt;h2 id="not-receiving-updates">Not receiving updates&lt;/h2>
&lt;p>For Scala, a common tool for getting dependency upgrades (and new Scala versions!) is &lt;a href="https://github.com/scala-steward-org/scala-steward">Scala Steward&lt;/a>.
For about half a year, only a few of our dependencies were getting updates. You may remember when Log4j had multiple security vulnerabilities (and corresponding patches) within about one week, in December 2021. This one &lt;em>was&lt;/em> patched automatically. A few other dependencies weren&amp;rsquo;t being updated (note: I never saw security issues, or if we did we&amp;rsquo;d patch manually).&lt;/p>
&lt;p>We were extracting a version and interpolating with it.
The fix here was to declare each dependency and its version on its own line. It didn&amp;rsquo;t really make PRs harder to review, and is even a bit clearer in a PR to show you what really changed.&lt;/p>
&lt;p>If you&amp;rsquo;re not getting updates with Scala Steward, that might be something to look into!&lt;/p>
&lt;h2 id="not-receiving-updates-20-failed-to-decode-modules">Not receiving updates&amp;hellip; 2.0: &lt;code>Failed to decode Modules&lt;/code>&lt;/h2>
&lt;p>If you have a big &lt;code>Mill&lt;/code> Scala project (let&amp;rsquo;s say, a monorepo - with about 10 modules) and fair number of dependencies - you might be seeing this problem.&lt;/p>
&lt;p>I ran a local clone of Steward with a teammate, adding some print-lines to diagnose the parser. We saw the input string for parsing was blank for our project. Looking at &lt;code>MillAlg.scala&lt;/code>, we saw about &lt;a href="https://github.com/scala-steward-org/scala-steward/pull/2717">5000 lines of the &lt;em>end&lt;/em> of a JSON object&lt;/a>. The default buffer is 8192 bytes. Increasing the CLI argument &lt;a href="https://github.com/scala-steward-org/scala-steward/pull/1829">&lt;code>--max-buffer-size&lt;/code>&lt;/a> to &lt;code>32768&lt;/code> fixed the issue for us. The author also raised a &lt;a href="https://github.com/scala-steward-org/scala-steward/pull/2940">PR&lt;/a> to give a more obvious error about this, instead of returning some partial JSON.&lt;/p>
&lt;h1 id="kinesis">Kinesis&lt;/h1>
&lt;p>With Kinesis, we were getting hundreds of thousands of errors per week -&lt;code>[metrics_manager.cc:145] Metrics upload failed&lt;/code>- giving a very bad signal:noise ratio in our DataDog logs.&lt;/p>
&lt;p>We only use metrics at the &amp;ldquo;stream&amp;rdquo; level, rather than the &amp;ldquo;shard&amp;rdquo; level (a stream has many shards, and shards can sometimes report no data &amp;amp; error).&lt;/p>
&lt;p>On a &lt;code>KinesisProducerConfiguration&lt;/code>, do &lt;code>.setMetricsGranularity(&amp;quot;stream&amp;quot;)&lt;/code>. The default level is &amp;ldquo;shard&amp;rdquo;.&lt;/p>
&lt;p>Also be mindful of costs. The Javadocs state that two shards with two streams each will produce &lt;em>seven&lt;/em> CloudWatch metrics (4x shard, 2x stream, 1 global).&lt;/p>
&lt;p>AWS support was not so helpful with this error (&lt;a href="https://github.com/awslabs/amazon-kinesis-producer/issues/188#issuecomment-557198786">essentially saying: &amp;ldquo;it&amp;rsquo;s a known issue, but please work around it by filtering out the logs&amp;rdquo;&lt;/a>) - setting a more accurate configuration is better, and I &lt;a href="https://github.com/awslabs/amazon-kinesis-producer/issues/188#issuecomment-1189202115">shared our recommendation on the issue&lt;/a>.&lt;/p>
&lt;h1 id="on-call">On-call&lt;/h1>
&lt;p>With good tests (unit, integration, end-to-end, performance, etc.), you won&amp;rsquo;t get called out much and it might be worth the extra pay bump + other perks :)&lt;/p>
&lt;h1 id="gh-cli---downloading-files--using-in-github-actions">&lt;code>gh&lt;/code> CLI - downloading files, &amp;amp; using in GitHub Actions&lt;/h1>
&lt;p>&lt;code>curl $(gh api $URL_TO_FILE_ON_GITHUB) --jq .download_url) -o ./path/to/download.ext&lt;/code>&lt;/p>
&lt;p>If you install the &lt;code>gh&lt;/code> CLI on you GitHub Action runners too, it can be a nice way to interact with your GitHub (enterprise works too!). You just need to &lt;a href="https://josh-ops.com/posts/gh-auth-login-in-actions/">set the enterprise token and GitHub Host as env variables&lt;/a>.&lt;/p></description></item><item><title>ChatOps - just say the word</title><status>seeding</status><link>https://james-s-w-clark.github.io/garden/chatops/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/chatops/</guid><description>&lt;p>ChatOps: you say some trigger, and you get some response. The processing behind the scenes can be as complex or niche as you like.&lt;/p>
&lt;p>In this blog, we&amp;rsquo;ll talk about three different ChatOps tools (Slack, GitHub Actions, Hubot) and how they can:&lt;/p>
&lt;ul>
&lt;li>Set up a basic reminder (Slack)&lt;/li>
&lt;li>Trigger image builds, performance tests, etc. on PRs (GitHub Actions)&lt;/li>
&lt;li>Send a list of open PRs, and their review counts, to Slack (Hubot)&lt;/li>
&lt;/ul>
&lt;h1 id="slack">Slack&lt;/h1>
&lt;p>Slack has a few &lt;a href="https://slack.com/intl/en-gb/help/articles/360057554553-Use-shortcuts-to-take-actions-in-Slack">baked in commands (&amp;ldquo;Shortcuts&amp;rdquo;)&lt;/a>.
The most useful I&amp;rsquo;ve seen is reminders - whether for yourself or for your team. Here&amp;rsquo;s a few examples, with the format []&lt;code>/remind [yourself or #channel] [what] [when].&lt;/code>](&lt;a href="https://slack.com/intl/en-gb/help/articles/208423427-Set-a-reminder)">https://slack.com/intl/en-gb/help/articles/208423427-Set-a-reminder)&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>/remind #my-team to join &lt;a href="https://meet.google.com/?pli=1">Google Meet&lt;/a> on Wednesday at 4:30pm&lt;/li>
&lt;li>/remind me to file TPS reports in 20 minutes&lt;/li>
&lt;li>/remind me to have a great weekend every Friday at 5pm&lt;/li>
&lt;/ul>
&lt;h1 id="github-actions">GitHub Actions&lt;/h1>
&lt;p>Note: If you have a project on Public GitHub, you can use their action &amp;ldquo;runners&amp;rdquo; for free. If you&amp;rsquo;re in the GitHub Enterprise Suite, you&amp;rsquo;ll need to deploy your own &lt;a href="https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/using-self-hosted-runners-in-a-workflow#using-default-labels-to-route-jobs">&lt;code>runs-on: [self-hosted]&lt;/code>&lt;/a> &amp;ldquo;runners&amp;rdquo;. There are some projects that can help you kick-start self-hosting, such as &lt;a href="https://github.com/philips-labs/terraform-aws-github-runner">the scalable spot instance setup
&amp;ldquo;terraform-aws-github-runner&amp;rdquo;.&lt;/a>&lt;/p>
&lt;p>perf tests awkward process, evolving over time as we change our Jenkins pipelines to multibranch etc.&lt;/p>
&lt;p>very valuable - perf test before merge&lt;/p>
&lt;p>low barrier to entry: chat ops. Ask a PR to be perf tested, and an hour later you have&lt;/p>
&lt;ol>
&lt;li>docker images build&lt;/li>
&lt;li>applications performance tested&lt;/li>
&lt;/ol>
&lt;h1 id="hubot">Hubot&lt;/h1></description></item><item><title>Ways of Working 'checklist'</title><status>seeding</status><link>https://james-s-w-clark.github.io/garden/ways-of-working-checklist/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/ways-of-working-checklist/</guid><description>&lt;p>Every team will figure out their own unique ways of working through &amp;ldquo;Forming, Storming, Norming and Performing&amp;rdquo; - but here are some techniques that I&amp;rsquo;ve seen provide lots of value - usually with little effort!&lt;/p>
&lt;p>â Why not take a note of each one you aren&amp;rsquo;t using yet as you read?&lt;/p>
&lt;h1 id="github">GitHub&lt;/h1>
&lt;h2 id="pr-templates">PR Templates&lt;/h2>
&lt;p>Open source projects often have multiple PR templates, to help capture context on &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates#issue-templates">bug reports, feature requests, and security vulnerabilities.&lt;/a>&lt;/p>
&lt;p>In your team&amp;rsquo;s day-to-day repositories, it&amp;rsquo;s likely you aren&amp;rsquo;t using templates. Maybe they &amp;ldquo;get in the way&amp;rdquo; and &amp;ldquo;just get deleted&amp;rdquo;, but these two features might make it more interesting!&lt;/p>
&lt;h3 id="markdown-comments">Markdown comments&lt;/h3>
&lt;p>GitHub uses MarkDown (their own special flavour of MarkDown, really) - and it supports comments:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&amp;lt;!-- Please enter the ticket number below (GitHub will autolink to Jira), e.g. JIRA-1234 --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>JIRA-420
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;!--
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>For this feature/fix, please link any tests from other repositories too:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- [ ] e2e: E2E-PR-1337
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- [ ] perf-tests: PERF-404
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These comments are only visible when editing - you can&amp;rsquo;t see them on the posted description.
You can use comment to give friendly reminders on:&lt;/p>
&lt;ul>
&lt;li>Providing context&lt;/li>
&lt;li>Linking to the ticket (rather than paraphrasing all that context!)&lt;/li>
&lt;li>Ensuring tests (unit, integration, performance) are covered
&lt;ul>
&lt;li>You could give a commented-out checklist if you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="autolinks">AutoLinks&lt;/h3>
&lt;p>In each GitHub repository, you can set up &amp;ldquo;AutoLinks&amp;rdquo;. They&amp;rsquo;re basically an autogenerated, tidy hyperlink.&lt;/p>
&lt;p>The GitHub Docs give a good example - but I&amp;rsquo;ll extract a snippet and save you getting distracted:&lt;/p>
&lt;ul>
&lt;li>Reference prefix: &lt;code>JIRA-&lt;/code>&lt;/li>
&lt;li>Target URL: &lt;code>https://jira.example.com/issue?query=&amp;lt;num&amp;gt;&lt;/code>&lt;/li>
&lt;li>Preview: &lt;code>JIRA-123&lt;/code> is converted to &lt;code>https://jira.example.com/issue?query=123&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Combined with templates, you can ensure that every PR has a short link to the relevant tickets.
This is much better than just having the ticket number (and no link) in the title/description/branch/commits:&lt;/p>
&lt;ul>
&lt;li>It saves the PR author time in making these links&lt;/li>
&lt;li>It saves the reviewers time fishing around in Jira and getting distracted&lt;/li>
&lt;li>It ensures everyone has easily accessible context, so the PR description can focus on the actual changes&lt;/li>
&lt;/ul>
&lt;p>Until I knew this I was using an Espanso text expansion macro &lt;code>:JIRA&lt;/code> to do similar, but this setup gives your whole team an awesome shared capability&lt;/p>
&lt;h3 id="conventional-comments">Conventional comments&lt;/h3>
&lt;p>Stating the importance &amp;amp; intent of your message up front can make communication clearer, and decisions faster.&lt;/p>
&lt;p>Read more in detail at &lt;a href="https://conventionalcomments.org/">https://conventionalcomments.org/&lt;/a>, but basically comments on PRs can look more valuable like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>issue: this mock never gets called!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>praise: this method is really easy to read, and handles the logic very well
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>nitpick: these two tests could be combined
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compare the latter example to how it might be expressed without &amp;ldquo;conventional comments&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>These two tests could be combined, but it&amp;#39;s not a blocker for this PR and I&amp;#39;ll approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="conventional-commits">Conventional commits&lt;/h3>
&lt;p>Commits can look like:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docs: add javadocs for user-facing swagger api&lt;/code>&lt;/li>
&lt;li>&lt;code>bug: fix a flaky test&lt;/code>&lt;/li>
&lt;li>&lt;code>chore: bump dependency version x-&amp;gt;y&lt;/code>&lt;/li>
&lt;li>&lt;code>feat: AI face detection when user blinks&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>It could help you have a more atomic git history, which may make PRs easier to comb through.
You can also use the prefixes to group changes, and make prettier changelogs.&lt;/p>
&lt;p>Read more: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/p>
&lt;h1 id="tickets--work-capture">Tickets / work capture&lt;/h1>
&lt;h2 id="make-templates">Make templates&lt;/h2>
&lt;ul>
&lt;li>Context, task, ACs, key contacts,&lt;/li>
&lt;li>User stories&lt;/li>
&lt;/ul>
&lt;p>Templates are all about adding context in an organised way.
Having this context gives your team more autonomy and interest in the problems, and can lead to better outcomes. Think &amp;ldquo;Context over control&amp;rdquo;&lt;/p>
&lt;h1 id="knowledge-management">Knowledge management&lt;/h1>
&lt;p>How are you recording your knowledge? Probably in a few places! It might look like this:&lt;/p>
&lt;ul>
&lt;li>Slack (short term - threads can be linked, good for captured asynchronous discussion)&lt;/li>
&lt;li>Google Docs (also great for captured async discussion, but leaning towards )&lt;/li>
&lt;li>Confluence (longer-term storage for internal decisions - awkward to collaborate on, not good for regular updates)&lt;/li>
&lt;li>Websites (static sites like Hugo&amp;rsquo;s Doks &amp;amp; Docusaurus can make information presentable, searchable, and written in simple markdown &amp;amp; managed by e.g. Git)&lt;/li>
&lt;li>Some loose markdown files in various repos (maybe some readme.md)&lt;/li>
&lt;/ul>
&lt;p>To get someone up to speed on your project, you&amp;rsquo;d probably start with the higher-level, more organised/presentable formats. Hopefully there is a natural flow through the information, otherwise someone who knows the scenery may have to plan a route for you.&lt;/p>
&lt;p>But what if there were tools that combined the strengths of these platforms. Are there any services that are:&lt;/p>
&lt;ul>
&lt;li>simple: are written in simple markdown-like language&lt;/li>
&lt;li>collaborative: many users can write in real-time&lt;/li>
&lt;li>efficient: easy to convert discussions into clean documentation&lt;/li>
&lt;li>searchable: text search, or even graph search (how do ideas and documentation naturally relate?)&lt;/li>
&lt;/ul>
&lt;h2 id="notion">Notion&lt;/h2>
&lt;p>I use Notion, which covers these points well. It&amp;rsquo;s becoming more and more popular, and I&amp;rsquo;ve seen a few companies using it.
Despite appearing simple, there&amp;rsquo;s plenty of power features under the hood:&lt;/p>
&lt;ul>
&lt;li>You can create tables of data - and create views over them, filter, sort, label and organise in helpful ways&lt;/li>
&lt;li>You can make timelines, calendars&lt;/li>
&lt;li>You can use it like a task management system (GTD, four quadrants - whatever you want)&lt;/li>
&lt;li>You can use it as a sprint/kanban board&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s powerful - even for free users.
For businesses, it&amp;rsquo;s at least $15 per user, per month. That sounds like quite a lot, but &lt;a href="https://www.atlassian.com/software/jira/pricing?&amp;amp;aceid=&amp;amp;adposition=&amp;amp;adgroup=144583507597&amp;amp;campaign=19306719987&amp;amp;creative=642044705684&amp;amp;device=c&amp;amp;keyword=jira%20cost&amp;amp;matchtype=e&amp;amp;network=g&amp;amp;placement=&amp;amp;ds_kids=p74602839944&amp;amp;ds_e=GOOGLE&amp;amp;ds_eid=700000001558501&amp;amp;ds_e1=GOOGLE&amp;amp;gclid=Cj0KCQjwr82iBhCuARIsAO0EAZwOOUXmPpGJL3jh7S3mnHU5GnfebfyTdNgpRlczLTWDG9gWD0QTlGkaAs1cEALw_wcB&amp;amp;gclsrc=aw.ds">it looks like Jira costs the same&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve never worked in a company using it as a central tool in all the ways above - so I can&amp;rsquo;t actually vouch for it. Maybe it only works up to a certain scale of organisation - but maybe that could be your organisation.&lt;/p>
&lt;h2 id="obsidian">Obsidian&lt;/h2>
&lt;p>I didn&amp;rsquo;t get far into Obsidian - the theory can get pretty deep, and there&amp;rsquo;s many methodologies. You might have heard of:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Second brain&amp;rdquo;, and&lt;/li>
&lt;li>&amp;ldquo;Zettelkasten&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>The key concept is that ideas are related, and naturally link up (like in our brain).
You can view them as a graph (looks like synapses in our brain), converge, and diverge thoughts whilst keeping them linked.
There&amp;rsquo;s also a cool plugin system. I had a play and set up cloud sync to GitHub and OneDrive. I&amp;rsquo;ve already got years of notes in Notion, and didn&amp;rsquo;t quite get sold on Obsidian.&lt;/p>
&lt;p>Arguably, the notes (and their relations!) might not be personal enough to be maximally useful for everyone. However, across a small team it could work really well. &lt;a href="https://obsidian.md/pricing">$50 per user, per year - plus about $100 a year for sync.&lt;/a>&lt;/p>
&lt;p>If you think you&amp;rsquo;re having problems in some of those areas, maybe try a different knowledge management system.
This is totally not an advert ;) I&amp;rsquo;d just love to see first-hand how these tools could work for some teams instead of the usual Jira/Confluence fare! If you have some ð² and some â, your team could spike using these tools.&lt;/p>
&lt;h1 id="discussions">Discussions&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Problem&lt;/th>
&lt;th>Solution&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Rabbit holes&lt;/td>
&lt;td>Be mindful of topics dominating meetings - consider a separate meeting/thread to go into specifics&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Circling&lt;/td>
&lt;td>Be mindful of discussions looping. Raise the concern, or capture notes everyone can see and help to align on a plan&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uncaptured discussion&lt;/td>
&lt;td>Take notes and share them. Ask for corrections, as you may have misunderstood. Whether it&amp;rsquo;s minutes for regular meetings, or details in ticket refinement - capturing 5 minutes of context now can save a few minutes in the future&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Discussion contains too many moving pieces&lt;/td>
&lt;td>Make a quick sketch, in TLDRAW or even Mermaid. Humans find it hard to remember 5-9 &amp;ldquo;bits&amp;rdquo; of info - compress ideas into a visual)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Out of office/ill teammates missed important discussion meetings&lt;/td>
&lt;td>Record the meetings, and update the calendar invite with the recording link. Transcribe the audio, provide a searchable interface to save time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Solutionising without being aligned&lt;/td>
&lt;td>Define the problem statement. &amp;ldquo;What questions are we trying to answer?&amp;rdquo;, &amp;ldquo;What data lets us answer these questions?&amp;rdquo;, &amp;ldquo;How can we get that data?&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="collaborative-working">Collaborative working&lt;/h1>
&lt;h2 id="visible-welcoming-huddles">Visible, welcoming huddles&lt;/h2>
&lt;p>Is your team pairing and mobbing, but in private calls?
It&amp;rsquo;s not transparent or welcoming - so consider this:&lt;/p>
&lt;p>Take the number of devs you have, and divide by two. Make this many &amp;ldquo;pairing&amp;rdquo; Slack channels.
It gives a space for everyone to pair, or form mobs. If someone needs help, it&amp;rsquo;s easy to hop in and out without the complexity of setting up more calls.&lt;/p>
&lt;h2 id="remote-pairing">Remote pairing&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tool&lt;/th>
&lt;th>Review&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Zoom&lt;/td>
&lt;td>Solid screenshare quality, awkward drawing tools, and confusing controls. Preferred screen-sharing platform for now&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Slack&lt;/td>
&lt;td>Worst screenshare &amp;amp; audio quality. Most convenient to drop in/out with pairing channels&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VS Code&lt;/td>
&lt;td>Shared editor &amp;amp; terminal are good - but the file explorer seems too strict to let the guest explore the project and be productive&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Intellij&lt;/td>
&lt;td>Code With Me is decent now - my main issue is the Shared Terminal is completely broken for the host (a big problem if you run your tests there!)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://tuple.app/">Tuple&lt;/a>&lt;/td>
&lt;td>Great screenshare quality (configurable), good interactivity. Configuration maybe a bit too permissive, but necessary. Great features like &amp;ldquo;pebble drop&amp;rdquo; to show where you&amp;rsquo;re looking&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quality-checks">Quality checks&lt;/h1>
&lt;ul>
&lt;li>git hooks&lt;/li>
&lt;li>github actions has a broad marketplace&lt;/li>
&lt;/ul></description></item><item><title>Rota Driven Development â</title><status>evergreen</status><link>https://james-s-w-clark.github.io/garden/rota-driven-development/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/rota-driven-development/</guid><description>&lt;p>How can you take a bunch of T-shaped developers and upskill everyone to be a ð©-shaped developer?&lt;/p>
&lt;p>You might know a few ways you can do this already:&lt;/p>
&lt;ul>
&lt;li>Knowledge sharing sessions&lt;/li>
&lt;li>Pairing/Mobbing&lt;/li>
&lt;li>Giving regular, honest feedback&lt;/li>
&lt;/ul>
&lt;p>You might know why it could be a good idea:&lt;/p>
&lt;ul>
&lt;li>Employees want to be empowered&lt;/li>
&lt;li>Learning, teaching, and broadening horizons can be rewarding &amp;amp; fun&lt;/li>
&lt;li>Reduced &amp;ldquo;bus factor&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>But what would something &lt;em>really extreme&lt;/em> look like?
Enter: &amp;ldquo;Rota Driven Development&amp;rdquo;
&lt;em>Note: You might even want to experiment with this setup if you already have pairing/mobbing as your main way of working. Otherwise, this might sound quite terrible! But let&amp;rsquo;s see how it might be valuable. This post isn&amp;rsquo;t about why pairing is good or bad - but what an extreme variant of it could look like&lt;/em>&lt;/p>
&lt;h1 id="illustrative-example">Illustrative example&lt;/h1>
&lt;p>Let&amp;rsquo;s say we have three developers:&lt;/p>
&lt;ul>
&lt;li>BackEnd expert (B), with a bit of Cyber (c) [Bc_]&lt;/li>
&lt;li>Cyber expert (C), no other experience [&lt;em>C&lt;/em>]&lt;/li>
&lt;li>FrontEnd expert (F), with a bit of BackEnd (b) [b_F]&lt;/li>
&lt;/ul>
&lt;p>When you pair these developers, they&amp;rsquo;ll level up by working on tasks together:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>[Bc_] + [b_F] -&amp;gt; [Bcf] + [B_F] (let&amp;rsquo;s say the BackEnd expert didn&amp;rsquo;t share much on Cyber this time)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[B_F] + [&lt;em>C&lt;/em>] -&amp;gt; [BcF] + [bCf] (they worked across all three topics)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Already, the team is becoming much more well-rounded. Everyone has picked up at least the basics of every field.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Of course, it&amp;rsquo;s an extreme example. More realistically, there could be many domains (framework, syntax, literally domain knowledge, etc.) within any of these three fields - so it can still make sense for e.g. BackEnd developers only.&lt;/p>
&lt;p>In a real team, there would probably be a few more people as well - so everyone can Always Be Transferring Knowledge&lt;/p>
&lt;h1 id="your-teams-skill-matrix">Your team&amp;rsquo;s &amp;ldquo;skill matrix&amp;rdquo;&lt;/h1>
&lt;p>To find out what some quality pairings would be, you can make a shared table of people and how they feel their skills are out of 5.
It should highlight gaps, and if you update it few weeks/months you use it to track progress.&lt;/p>
&lt;h1 id="planning-work-for-maximal-learning">Planning work for maximal learning&lt;/h1>
&lt;p>In &amp;ldquo;second language acquisition&amp;rdquo;, there is a theory called &amp;ldquo;i+1&amp;rdquo;:
To have a smooth, low-stress learning environment, you feed someone content that is slightly more complex than their current level. In other words, don&amp;rsquo;t throw people in at the deep end.
If you can estimate the complexity (via story points or some other metric), you could combine that with the skill matrix to optimise growth in your employees&amp;rsquo; skill set.&lt;/p>
&lt;h1 id="but-tickets-and-rotations-dont-line-up-nicely">But tickets and rotations don&amp;rsquo;t line up nicely&lt;/h1>
&lt;p>There&amp;rsquo;s a few approaches you could try:&lt;/p>
&lt;ul>
&lt;li>Set pairings for a whole sprint&lt;/li>
&lt;li>Set pairings for only the first ticket in a sprint, and then let people self-organise&lt;/li>
&lt;/ul>
&lt;h1 id="how-can-my-team-see-if-this-works-for-us">How can my team see if this works for us?&lt;/h1>
&lt;ol>
&lt;li>Check if your team is even interested in such an idea&lt;/li>
&lt;li>Make the up-front investment (skills matrix), and continued effort investment (changes to planning/ticket preparation)&lt;/li>
&lt;li>Run a trial for a few weeks. Maybe run a retro on the rotation process, and iterate if you see value there. Scrap it and move on if not.&lt;/li>
&lt;/ol>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>For teams that have already bought into pairing and want to try a more focused approach to maximise their learning: &amp;ldquo;Rota Driven Development&amp;rdquo; could be an interesting experiment to try.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ways-Of-Working on James' Digital Garden</title><link>https://james-s-w-clark.github.io/garden_tags/ways-of-working/</link><description>Recent content in Ways-Of-Working on James' Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>James Clark ©</copyright><lastBuildDate>Thu, 18 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://james-s-w-clark.github.io/garden_tags/ways-of-working/index.xml" rel="self" type="application/rss+xml"/><item><title>ChatOps - just say the word</title><status>seeding</status><link>https://james-s-w-clark.github.io/garden/chatops/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/chatops/</guid><description>&lt;p>ChatOps: you say some trigger, and you get some response. The processing behind the scenes can be as complex or niche as you like.&lt;/p>
&lt;p>In this blog, we&amp;rsquo;ll talk about three different ChatOps tools (Slack, GitHub Actions, Hubot) and how they can:&lt;/p>
&lt;ul>
&lt;li>Set up a basic reminder (Slack)&lt;/li>
&lt;li>Trigger image builds, performance tests, etc. on PRs (GitHub Actions)&lt;/li>
&lt;li>Send a list of open PRs, and their review counts, to Slack (Hubot)&lt;/li>
&lt;/ul>
&lt;h1 id="slack">Slack&lt;/h1>
&lt;p>Slack has a few &lt;a href="https://slack.com/intl/en-gb/help/articles/360057554553-Use-shortcuts-to-take-actions-in-Slack">baked in commands (&amp;ldquo;Shortcuts&amp;rdquo;)&lt;/a>.
The most useful I&amp;rsquo;ve seen is reminders - whether for yourself or for your team. Here&amp;rsquo;s a few examples, with the format []&lt;code>/remind [yourself or #channel] [what] [when].&lt;/code>](&lt;a href="https://slack.com/intl/en-gb/help/articles/208423427-Set-a-reminder)">https://slack.com/intl/en-gb/help/articles/208423427-Set-a-reminder)&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>/remind #my-team to join &lt;a href="https://meet.google.com/?pli=1">Google Meet&lt;/a> on Wednesday at 4:30pm&lt;/li>
&lt;li>/remind me to file TPS reports in 20 minutes&lt;/li>
&lt;li>/remind me to have a great weekend every Friday at 5pm&lt;/li>
&lt;/ul>
&lt;h1 id="github-actions">GitHub Actions&lt;/h1>
&lt;p>Note: If you have a project on Public GitHub, you can use their action &amp;ldquo;runners&amp;rdquo; for free. If you&amp;rsquo;re in the GitHub Enterprise Suite, you&amp;rsquo;ll need to deploy your own &lt;a href="https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/using-self-hosted-runners-in-a-workflow#using-default-labels-to-route-jobs">&lt;code>runs-on: [self-hosted]&lt;/code>&lt;/a> &amp;ldquo;runners&amp;rdquo;. There are some projects that can help you kick-start self-hosting, such as &lt;a href="https://github.com/philips-labs/terraform-aws-github-runner">the scalable spot instance setup
&amp;ldquo;terraform-aws-github-runner&amp;rdquo;.&lt;/a>&lt;/p>
&lt;p>perf tests awkward process, evolving over time as we change our Jenkins pipelines to multibranch etc.&lt;/p>
&lt;p>very valuable - perf test before merge&lt;/p>
&lt;p>low barrier to entry: chat ops. Ask a PR to be perf tested, and an hour later you have&lt;/p>
&lt;ol>
&lt;li>docker images build&lt;/li>
&lt;li>applications performance tested&lt;/li>
&lt;/ol>
&lt;h1 id="hubot">Hubot&lt;/h1></description></item><item><title>Ways of Working 'checklist'</title><status>seeding</status><link>https://james-s-w-clark.github.io/garden/ways-of-working-checklist/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/ways-of-working-checklist/</guid><description>&lt;p>Every team will figure out their own unique ways of working through &amp;ldquo;Forming, Storming, Norming and Performing&amp;rdquo; - but here are some techniques that I&amp;rsquo;ve seen provide lots of value - usually with little effort!&lt;/p>
&lt;p>✏ Why not take a note of each one you aren&amp;rsquo;t using yet as you read?&lt;/p>
&lt;h1 id="github">GitHub&lt;/h1>
&lt;h2 id="pr-templates">PR Templates&lt;/h2>
&lt;p>Open source projects often have multiple PR templates, to help capture context on &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates#issue-templates">bug reports, feature requests, and security vulnerabilities.&lt;/a>&lt;/p>
&lt;p>In your team&amp;rsquo;s day-to-day repositories, it&amp;rsquo;s likely you aren&amp;rsquo;t using templates. Maybe they &amp;ldquo;get in the way&amp;rdquo; and &amp;ldquo;just get deleted&amp;rdquo;, but these two features might make it more interesting!&lt;/p>
&lt;h3 id="markdown-comments">Markdown comments&lt;/h3>
&lt;p>GitHub uses MarkDown (their own special flavour of MarkDown, really) - and it supports comments:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&amp;lt;!-- Please enter the ticket number below (GitHub will autolink to Jira), e.g. JIRA-1234 --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>JIRA-420
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;!--
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>For this feature/fix, please link any tests from other repositories too:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- [ ] e2e: E2E-PR-1337
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- [ ] perf-tests: PERF-404
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These comments are only visible when editing - you can&amp;rsquo;t see them on the posted description.
You can use comment to give friendly reminders on:&lt;/p>
&lt;ul>
&lt;li>Providing context&lt;/li>
&lt;li>Linking to the ticket (rather than paraphrasing all that context!)&lt;/li>
&lt;li>Ensuring tests (unit, integration, performance) are covered
&lt;ul>
&lt;li>You could give a commented-out checklist if you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="autolinks">AutoLinks&lt;/h3>
&lt;p>In each GitHub repository, you can set up &amp;ldquo;AutoLinks&amp;rdquo;. They&amp;rsquo;re basically an autogenerated, tidy hyperlink.&lt;/p>
&lt;p>The GitHub Docs give a good example - but I&amp;rsquo;ll extract a snippet and save you getting distracted:&lt;/p>
&lt;ul>
&lt;li>Reference prefix: &lt;code>JIRA-&lt;/code>&lt;/li>
&lt;li>Target URL: &lt;code>https://jira.example.com/issue?query=&amp;lt;num&amp;gt;&lt;/code>&lt;/li>
&lt;li>Preview: &lt;code>JIRA-123&lt;/code> is converted to &lt;code>https://jira.example.com/issue?query=123&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Combined with templates, you can ensure that every PR has a short link to the relevant tickets.
This is much better than just having the ticket number (and no link) in the title/description/branch/commits:&lt;/p>
&lt;ul>
&lt;li>It saves the PR author time in making these links&lt;/li>
&lt;li>It saves the reviewers time fishing around in Jira and getting distracted&lt;/li>
&lt;li>It ensures everyone has easily accessible context, so the PR description can focus on the actual changes&lt;/li>
&lt;/ul>
&lt;p>Until I knew this I was using an Espanso text expansion macro &lt;code>:JIRA&lt;/code> to do similar, but this setup gives your whole team an awesome shared capability&lt;/p>
&lt;h3 id="conventional-comments">Conventional comments&lt;/h3>
&lt;p>Stating the importance &amp;amp; intent of your message up front can make communication clearer, and decisions faster.&lt;/p>
&lt;p>Read more in detail at &lt;a href="https://conventionalcomments.org/">https://conventionalcomments.org/&lt;/a>, but basically comments on PRs can look more valuable like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>issue: this mock never gets called!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>praise: this method is really easy to read, and handles the logic very well
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>nitpick: these two tests could be combined
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compare the latter example to how it might be expressed without &amp;ldquo;conventional comments&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>These two tests could be combined, but it&amp;#39;s not a blocker for this PR and I&amp;#39;ll approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="conventional-commits">Conventional commits&lt;/h3>
&lt;p>Commits can look like:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docs: add javadocs for user-facing swagger api&lt;/code>&lt;/li>
&lt;li>&lt;code>bug: fix a flaky test&lt;/code>&lt;/li>
&lt;li>&lt;code>chore: bump dependency version x-&amp;gt;y&lt;/code>&lt;/li>
&lt;li>&lt;code>feat: AI face detection when user blinks&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>It could help you have a more atomic git history, which may make PRs easier to comb through.
You can also use the prefixes to group changes, and make prettier changelogs.&lt;/p>
&lt;p>Read more: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/p>
&lt;h1 id="tickets--work-capture">Tickets / work capture&lt;/h1>
&lt;h2 id="make-templates">Make templates&lt;/h2>
&lt;ul>
&lt;li>Context, task, ACs, key contacts,&lt;/li>
&lt;li>User stories&lt;/li>
&lt;/ul>
&lt;p>Templates are all about adding context in an organised way.
Having this context gives your team more autonomy and interest in the problems, and can lead to better outcomes. Think &amp;ldquo;Context over control&amp;rdquo;&lt;/p>
&lt;h1 id="knowledge-management">Knowledge management&lt;/h1>
&lt;p>How are you recording your knowledge? Probably in a few places! It might look like this:&lt;/p>
&lt;ul>
&lt;li>Slack (short term - threads can be linked, good for captured asynchronous discussion)&lt;/li>
&lt;li>Google Docs (also great for captured async discussion, but leaning towards )&lt;/li>
&lt;li>Confluence (longer-term storage for internal decisions - awkward to collaborate on, not good for regular updates)&lt;/li>
&lt;li>Websites (static sites like Hugo&amp;rsquo;s Doks &amp;amp; Docusaurus can make information presentable, searchable, and written in simple markdown &amp;amp; managed by e.g. Git)&lt;/li>
&lt;li>Some loose markdown files in various repos (maybe some readme.md)&lt;/li>
&lt;/ul>
&lt;p>To get someone up to speed on your project, you&amp;rsquo;d probably start with the higher-level, more organised/presentable formats. Hopefully there is a natural flow through the information, otherwise someone who knows the scenery may have to plan a route for you.&lt;/p>
&lt;p>But what if there were tools that combined the strengths of these platforms. Are there any services that are:&lt;/p>
&lt;ul>
&lt;li>simple: are written in simple markdown-like language&lt;/li>
&lt;li>collaborative: many users can write in real-time&lt;/li>
&lt;li>efficient: easy to convert discussions into clean documentation&lt;/li>
&lt;li>searchable: text search, or even graph search (how do ideas and documentation naturally relate?)&lt;/li>
&lt;/ul>
&lt;h2 id="notion">Notion&lt;/h2>
&lt;p>I use Notion, which covers these points well. It&amp;rsquo;s becoming more and more popular, and I&amp;rsquo;ve seen a few companies using it.
Despite appearing simple, there&amp;rsquo;s plenty of power features under the hood:&lt;/p>
&lt;ul>
&lt;li>You can create tables of data - and create views over them, filter, sort, label and organise in helpful ways&lt;/li>
&lt;li>You can make timelines, calendars&lt;/li>
&lt;li>You can use it like a task management system (GTD, four quadrants - whatever you want)&lt;/li>
&lt;li>You can use it as a sprint/kanban board&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s powerful - even for free users.
For businesses, it&amp;rsquo;s at least $15 per user, per month. That sounds like quite a lot, but &lt;a href="https://www.atlassian.com/software/jira/pricing?&amp;amp;aceid=&amp;amp;adposition=&amp;amp;adgroup=144583507597&amp;amp;campaign=19306719987&amp;amp;creative=642044705684&amp;amp;device=c&amp;amp;keyword=jira%20cost&amp;amp;matchtype=e&amp;amp;network=g&amp;amp;placement=&amp;amp;ds_kids=p74602839944&amp;amp;ds_e=GOOGLE&amp;amp;ds_eid=700000001558501&amp;amp;ds_e1=GOOGLE&amp;amp;gclid=Cj0KCQjwr82iBhCuARIsAO0EAZwOOUXmPpGJL3jh7S3mnHU5GnfebfyTdNgpRlczLTWDG9gWD0QTlGkaAs1cEALw_wcB&amp;amp;gclsrc=aw.ds">it looks like Jira costs the same&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve never worked in a company using it as a central tool in all the ways above - so I can&amp;rsquo;t actually vouch for it. Maybe it only works up to a certain scale of organisation - but maybe that could be your organisation.&lt;/p>
&lt;h2 id="obsidian">Obsidian&lt;/h2>
&lt;p>I didn&amp;rsquo;t get far into Obsidian - the theory can get pretty deep, and there&amp;rsquo;s many methodologies. You might have heard of:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Second brain&amp;rdquo;, and&lt;/li>
&lt;li>&amp;ldquo;Zettelkasten&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>The key concept is that ideas are related, and naturally link up (like in our brain).
You can view them as a graph (looks like synapses in our brain), converge, and diverge thoughts whilst keeping them linked.
There&amp;rsquo;s also a cool plugin system. I had a play and set up cloud sync to GitHub and OneDrive. I&amp;rsquo;ve already got years of notes in Notion, and didn&amp;rsquo;t quite get sold on Obsidian.&lt;/p>
&lt;p>Arguably, the notes (and their relations!) might not be personal enough to be maximally useful for everyone. However, across a small team it could work really well. &lt;a href="https://obsidian.md/pricing">$50 per user, per year - plus about $100 a year for sync.&lt;/a>&lt;/p>
&lt;p>If you think you&amp;rsquo;re having problems in some of those areas, maybe try a different knowledge management system.
This is totally not an advert ;) I&amp;rsquo;d just love to see first-hand how these tools could work for some teams instead of the usual Jira/Confluence fare! If you have some 💲 and some ⌛, your team could spike using these tools.&lt;/p>
&lt;h1 id="discussions">Discussions&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Problem&lt;/th>
&lt;th>Solution&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Rabbit holes&lt;/td>
&lt;td>Be mindful of topics dominating meetings - consider a separate meeting/thread to go into specifics&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Circling&lt;/td>
&lt;td>Be mindful of discussions looping. Raise the concern, or capture notes everyone can see and help to align on a plan&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uncaptured discussion&lt;/td>
&lt;td>Take notes and share them. Ask for corrections, as you may have misunderstood. Whether it&amp;rsquo;s minutes for regular meetings, or details in ticket refinement - capturing 5 minutes of context now can save a few minutes in the future&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Discussion contains too many moving pieces&lt;/td>
&lt;td>Make a quick sketch, in TLDRAW or even Mermaid. Humans find it hard to remember 5-9 &amp;ldquo;bits&amp;rdquo; of info - compress ideas into a visual)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Out of office/ill teammates missed important discussion meetings&lt;/td>
&lt;td>Record the meetings, and update the calendar invite with the recording link. Transcribe the audio, provide a searchable interface to save time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Solutionising without being aligned&lt;/td>
&lt;td>Define the problem statement. &amp;ldquo;What questions are we trying to answer?&amp;rdquo;, &amp;ldquo;What data lets us answer these questions?&amp;rdquo;, &amp;ldquo;How can we get that data?&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="collaborative-working">Collaborative working&lt;/h1>
&lt;h2 id="visible-welcoming-huddles">Visible, welcoming huddles&lt;/h2>
&lt;p>Is your team pairing and mobbing, but in private calls?
It&amp;rsquo;s not transparent or welcoming - so consider this:&lt;/p>
&lt;p>Take the number of devs you have, and divide by two. Make this many &amp;ldquo;pairing&amp;rdquo; Slack channels.
It gives a space for everyone to pair, or form mobs. If someone needs help, it&amp;rsquo;s easy to hop in and out without the complexity of setting up more calls.&lt;/p>
&lt;h2 id="remote-pairing">Remote pairing&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tool&lt;/th>
&lt;th>Review&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Zoom&lt;/td>
&lt;td>Solid screenshare quality, awkward drawing tools, and confusing controls. Preferred screen-sharing platform for now&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Slack&lt;/td>
&lt;td>Worst screenshare &amp;amp; audio quality. Most convenient to drop in/out with pairing channels&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VS Code&lt;/td>
&lt;td>Shared editor &amp;amp; terminal are good - but the file explorer seems too strict to let the guest explore the project and be productive&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Intellij&lt;/td>
&lt;td>Code With Me is decent now - my main issue is the Shared Terminal is completely broken for the host (a big problem if you run your tests there!)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://tuple.app/">Tuple&lt;/a>&lt;/td>
&lt;td>Great screenshare quality (configurable), good interactivity. Configuration maybe a bit too permissive, but necessary. Great features like &amp;ldquo;pebble drop&amp;rdquo; to show where you&amp;rsquo;re looking&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quality-checks">Quality checks&lt;/h1>
&lt;ul>
&lt;li>git hooks&lt;/li>
&lt;li>github actions has a broad marketplace&lt;/li>
&lt;/ul></description></item><item><title>Rota Driven Development ⁉</title><status>evergreen</status><link>https://james-s-w-clark.github.io/garden/rota-driven-development/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/rota-driven-development/</guid><description>&lt;p>How can you take a bunch of T-shaped developers and upskill everyone to be a 🟩-shaped developer?&lt;/p>
&lt;p>You might know a few ways you can do this already:&lt;/p>
&lt;ul>
&lt;li>Knowledge sharing sessions&lt;/li>
&lt;li>Pairing/Mobbing&lt;/li>
&lt;li>Giving regular, honest feedback&lt;/li>
&lt;/ul>
&lt;p>You might know why it could be a good idea:&lt;/p>
&lt;ul>
&lt;li>Employees want to be empowered&lt;/li>
&lt;li>Learning, teaching, and broadening horizons can be rewarding &amp;amp; fun&lt;/li>
&lt;li>Reduced &amp;ldquo;bus factor&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>But what would something &lt;em>really extreme&lt;/em> look like?
Enter: &amp;ldquo;Rota Driven Development&amp;rdquo;
&lt;em>Note: You might even want to experiment with this setup if you already have pairing/mobbing as your main way of working. Otherwise, this might sound quite terrible! But let&amp;rsquo;s see how it might be valuable. This post isn&amp;rsquo;t about why pairing is good or bad - but what an extreme variant of it could look like&lt;/em>&lt;/p>
&lt;h1 id="illustrative-example">Illustrative example&lt;/h1>
&lt;p>Let&amp;rsquo;s say we have three developers:&lt;/p>
&lt;ul>
&lt;li>BackEnd expert (B), with a bit of Cyber (c) [Bc_]&lt;/li>
&lt;li>Cyber expert (C), no other experience [&lt;em>C&lt;/em>]&lt;/li>
&lt;li>FrontEnd expert (F), with a bit of BackEnd (b) [b_F]&lt;/li>
&lt;/ul>
&lt;p>When you pair these developers, they&amp;rsquo;ll level up by working on tasks together:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>[Bc_] + [b_F] -&amp;gt; [Bcf] + [B_F] (let&amp;rsquo;s say the BackEnd expert didn&amp;rsquo;t share much on Cyber this time)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[B_F] + [&lt;em>C&lt;/em>] -&amp;gt; [BcF] + [bCf] (they worked across all three topics)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Already, the team is becoming much more well-rounded. Everyone has picked up at least the basics of every field.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Of course, it&amp;rsquo;s an extreme example. More realistically, there could be many domains (framework, syntax, literally domain knowledge, etc.) within any of these three fields - so it can still make sense for e.g. BackEnd developers only.&lt;/p>
&lt;p>In a real team, there would probably be a few more people as well - so everyone can Always Be Transferring Knowledge&lt;/p>
&lt;h1 id="your-teams-skill-matrix">Your team&amp;rsquo;s &amp;ldquo;skill matrix&amp;rdquo;&lt;/h1>
&lt;p>To find out what some quality pairings would be, you can make a shared table of people and how they feel their skills are out of 5.
It should highlight gaps, and if you update it few weeks/months you use it to track progress.&lt;/p>
&lt;h1 id="planning-work-for-maximal-learning">Planning work for maximal learning&lt;/h1>
&lt;p>In &amp;ldquo;second language acquisition&amp;rdquo;, there is a theory called &amp;ldquo;i+1&amp;rdquo;:
To have a smooth, low-stress learning environment, you feed someone content that is slightly more complex than their current level. In other words, don&amp;rsquo;t throw people in at the deep end.
If you can estimate the complexity (via story points or some other metric), you could combine that with the skill matrix to optimise growth in your employees&amp;rsquo; skill set.&lt;/p>
&lt;h1 id="but-tickets-and-rotations-dont-line-up-nicely">But tickets and rotations don&amp;rsquo;t line up nicely&lt;/h1>
&lt;p>There&amp;rsquo;s a few approaches you could try:&lt;/p>
&lt;ul>
&lt;li>Set pairings for a whole sprint&lt;/li>
&lt;li>Set pairings for only the first ticket in a sprint, and then let people self-organise&lt;/li>
&lt;/ul>
&lt;h1 id="how-can-my-team-see-if-this-works-for-us">How can my team see if this works for us?&lt;/h1>
&lt;ol>
&lt;li>Check if your team is even interested in such an idea&lt;/li>
&lt;li>Make the up-front investment (skills matrix), and continued effort investment (changes to planning/ticket preparation)&lt;/li>
&lt;li>Run a trial for a few weeks. Maybe run a retro on the rotation process, and iterate if you see value there. Scrap it and move on if not.&lt;/li>
&lt;/ol>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>For teams that have already bought into pairing and want to try a more focused approach to maximise their learning: &amp;ldquo;Rota Driven Development&amp;rdquo; could be an interesting experiment to try.&lt;/p></description></item></channel></rss>
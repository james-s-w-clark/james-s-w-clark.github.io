<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tooling on James' Digital Garden</title><link>https://james-s-w-clark.github.io/garden_tags/tooling/</link><description>Recent content in tooling on James' Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>James Clark Â©</copyright><lastBuildDate>Fri, 21 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://james-s-w-clark.github.io/garden_tags/tooling/index.xml" rel="self" type="application/rss+xml"/><item><title>RTX ON - it's execution time</title><status>evergreen</status><link>https://james-s-w-clark.github.io/garden/rtx-asdf/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/rtx-asdf/</guid><description>&lt;p>I&amp;rsquo;ve been using previously used &lt;code>sdkman&lt;/code> for a few years to manage my JDK &amp;amp; Scala installations. It supports a good amount of tooling, but it&amp;rsquo;s very JVM focused. You may know &lt;code>nvm&lt;/code> or &lt;code>n&lt;/code> for managing and switching Node versions, or Volta/fnm for more general Javascript tooling management.&lt;/p>
&lt;p>Recently I&amp;rsquo;ve been getting into Elixir &amp;amp; Phoenix LiveView, and I came across a similar tool called &lt;code>asdf&lt;/code>. Actually though, thanks to its &amp;ldquo;plugins&amp;rdquo; system and almost 700 plugins, you can install so many different tools. Sounds good to me - I have projects using Python, Elixir, Java/Scala, Node, Terraform, AWS CLI, etc.. With one application, I can have tooling defined locally (per-project) so it&amp;rsquo;s all independent and easy to get the tooling right.&lt;/p>
&lt;p>This was working great for Elixir &amp;amp; Erlang, but the ergonomics felt a little off. In order to list versions, you have to first download the plugin. And due to its &amp;ldquo;shim&amp;rdquo; mechanism, it adds about 100ms delay to each command that passes through the asdf executable (my ELI5 understanding).&lt;/p>
&lt;p>I then came across &lt;a href="https://github.com/jdxcode/rtx">rtx&lt;/a>, a Rust tool inspired by &lt;code>asdf&lt;/code> that takes a different approach. Here&amp;rsquo;s some features I&amp;rsquo;m really liking:&lt;/p>
&lt;ul>
&lt;li>Speed - &lt;code>rtx&lt;/code> points to tooling versions via the PATH, and updates the PATH when necessary - this keeps interactions fast (it doesn&amp;rsquo;t go through a &amp;ldquo;shim&amp;rdquo; unless it has to, unlike &lt;code>asdf&lt;/code>)
&lt;ul>
&lt;li>Also, apparently &lt;code>python&lt;/code> called via &lt;code>rtx&lt;/code> is much more response than &lt;code>python&lt;/code> with &lt;code>pyenv&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Installs - If you have a bunch of microservices on different Node/Java versions, &lt;code>rtx&lt;/code> reloads the relevant version via the PATH when you switch project in your terminal. You don&amp;rsquo;t need to run commands like &lt;code>nvm use node 16&lt;/code> - it&amp;rsquo;s automatic. Global installs are supported too.&lt;/li>
&lt;li>Plugins - &lt;code>asdf&lt;/code>&amp;rsquo;s amazing plugins are here still, but you don&amp;rsquo;t have to explicltly install them first!
&lt;ul>
&lt;li>&lt;code>rtx&lt;/code> does have it&amp;rsquo;s own plugins, but &amp;lt;10 at the time of writing. Re-using asdf&amp;rsquo;s plugins is smart&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Documentation - the CLI &amp;amp; interactions are friendly, and setup is (almost) frictionless&lt;/li>
&lt;li>Configuration - &lt;code>.rtx.toml&lt;/code> and the CLI interactions with it are easy to use, and really powerful - see below!&lt;/li>
&lt;/ul>
&lt;h1 id="show-me-the-config">Show me the config&lt;/h1>
&lt;p>For our documentation website, I suggested we move from install nvm/node/yarn/sbt to just this configuration file (.rtx.toml):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#75af00">tools&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">node&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">yarn&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;1.22.19&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">sbt&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;1.9.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and this one-click script (in IntelliJ) to go from 0 to READY:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>curl https://rtx.pub/install.sh &lt;span style="color:#111">|&lt;/span> sh &lt;span style="color:#75715e"># install rtx &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#39;eval &amp;#34;$(~/bin/rtx activate zsh)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#75715e"># hook rtx into shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rtx install &lt;span style="color:#75715e"># install tooling&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn &lt;span style="color:#75715e"># install deps &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn run &lt;span style="color:#75715e"># launch dev website&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s a nice developer experience. I&amp;rsquo;m happy to know someone can clone a repo, click a button, grab a drink, and come back to a website!&lt;/p>
&lt;hr>
&lt;h1 id="ci---does-it-add-value-here">CI - does it add value here?&lt;/h1>
&lt;p>So, &lt;code>rtx&lt;/code> is pretty cool for local development - but what about CI?&lt;/p>
&lt;p>For our main project, we use a JDK, Scala, and Mill.
There&amp;rsquo;s a few Actions for setup (setup-java, coursier-setup, mill-setup, etc.) - but they usually want a version typing out. This could lead to drift between development and CI, and introduce a bit of toil when somebody finally notices or remembers.&lt;/p>
&lt;p>&lt;a href="https://github.com/actions/setup-java">setup-java&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/setup-java@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">distribution&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#d88200">&amp;#39;openjdk&amp;#39;&lt;/span> &lt;span style="color:#75715e"># See &amp;#39;Supported distributions&amp;#39; for available options&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">java-version&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#d88200">&amp;#39;17&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But it&amp;rsquo;d be nice if we could set up more, with less lines right? See &lt;a href="https://github.com/coursier/setup-action">Coursier&amp;rsquo;s setup-action&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">coursier/setup-action@v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">jvm&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">adopt:17&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apps&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">sbtn bloop ammonite&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ah, so it seems the versions can&amp;rsquo;t be specified (other than for the jvm).&lt;/p>
&lt;p>With the &lt;a href="https://github.com/marketplace/actions/rtx-action">rtx Action&lt;/a>, our &lt;code>.rtx.toml&lt;/code> files can be used - which is accurate, and brief:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#ae81ff">jdxcode/rtx-action@v1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I ran &lt;a href="https://github.com/IdiosApps/havvk/blob/master/.github/workflows/rtx-action-check.yml">this&lt;/a> as a workflow dispatch. The first run took 3m36s (it takes a while locally to install Elixir &amp;amp; Erlang too), but &lt;a href="https://github.com/IdiosApps/havvk/actions/runs/5627022179/job/15248908167">the second run (started soon after) took only 20 seconds&lt;/a>! GitHub Actions seems to have nicely cached the worker for my &lt;code>master&lt;/code> branch (270MB total). Apparently there&amp;rsquo;s a &lt;a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">10GB total limit&lt;/a> - though I can&amp;rsquo;t see how long it lasts. That&amp;rsquo;s cool though - our action &lt;em>just works&lt;/em> in CI, is super clean, and in Public GitHub they help us keep things fast with zero-configuration caches!&lt;/p>
&lt;h1 id="-but-my-versions-for-different-tools-are-scattered-around-my-source">&amp;hellip; but my versions for different tools are scattered around my source!&lt;/h1>
&lt;p>Let&amp;rsquo;s say you use three tools, which are specified in different files:&lt;/p>
&lt;ul>
&lt;li>openjdk-17 - in a Dockerfile&lt;/li>
&lt;li>Scala 2.13.xy - in a Dependencies.sc file&lt;/li>
&lt;li>mill - in .mill-version&lt;/li>
&lt;/ul>
&lt;p>Fortunately, &lt;code>rtx&lt;/code> uses the &lt;code>tera&lt;/code> templating engine so we can grab these dynamically.
These commands are kinda grim (I couldn&amp;rsquo;t use &amp;quot; or &amp;lsquo;; I found &lt;code>cut&lt;/code> to be a good command, thanks ChatGPT), but are probably &amp;ldquo;good enough&amp;rdquo; to not need updating. The sources they read won&amp;rsquo;t be changing spacing much:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#75af00">tools&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">mill&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#111">{&lt;/span> &lt;span style="color:#75af00">version&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;{{exec(command=&amp;#39;echo $(cat .mill-version)&amp;#39;)}}&amp;#34;&lt;/span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">java&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#111">{&lt;/span> &lt;span style="color:#75af00">version&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;{{exec(command=&amp;#39;grep -m 1 openjdk docker/Dockerfile | cut -c 12- | tr : -&amp;#39;)}}&amp;#34;&lt;/span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">scala&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#111">{&lt;/span> &lt;span style="color:#75af00">version&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;{{exec(command=&amp;#39;grep -m 1 2.13 dependencies/Dependencies.sc | cut -c 33-39&amp;#39;)}}&amp;#34;&lt;/span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The secret sauce here is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>grep -m 1 &amp;lt;phrase&amp;gt;&lt;/code> returns the first line that matches&lt;/li>
&lt;li>&lt;code>cut 12-&lt;/code> gives from the 12th char onwards, &lt;code>cut 33-39&lt;/code> does what you&amp;rsquo;d think&lt;/li>
&lt;/ul>
&lt;p>Yep, it does look dumb, but:&lt;/p>
&lt;ul>
&lt;li>For Java we just pin to a major version; if we stick to the same vendor, there&amp;rsquo;ll be no issue&lt;/li>
&lt;li>For Mill, it&amp;rsquo;s just a plain cat. Not too bad :)&lt;/li>
&lt;li>For Scala, until there&amp;rsquo;s a migration to Scala 3 then we&amp;rsquo;ll just see 2.13.11 -&amp;gt; 2.13.xy&lt;/li>
&lt;/ul>
&lt;h1 id="additions--alternatives">Additions &amp;amp; Alternatives&lt;/h1>
&lt;ul>
&lt;li>For &lt;code>asdf&lt;/code>, there is &lt;a href="https://github.com/mhanberg/lazyasdf">lazyasdf&lt;/a> - it&amp;rsquo;s a TUI for &lt;code>asdf&lt;/code> (like how k9s is a TUI for k8s)&lt;/li>
&lt;li>An alternative to &lt;code>asdf&lt;/code>/&lt;code>rtx&lt;/code> is &lt;a href="https://github.com/aquaproj/aqua">aqua&lt;/a>, written in Go. The local configuration (like .rtx.toml) is aqua.yaml, and it supports global installs too
&lt;ul>
&lt;li>The &lt;a href="https://github.com/aquaproj/aqua-registry/tree/main/pkgs">Aqua registry&lt;/a> has gives 1200+ results - but I see nothing for Elixir, Java/JDK/JVM, and the only node result is &amp;ldquo;kubectl-node-shell&amp;rdquo;&lt;/li>
&lt;li>The fzf-esque interactive search for packages with &lt;code>aqua g&lt;/code> is nice, even if I can&amp;rsquo;t find what I want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="whats-bad-about-rtx-security">What&amp;rsquo;s bad about rtx (security)?&lt;/h1>
&lt;p>There&amp;rsquo;s a good &lt;a href="https://github.com/jdxcode/rtx/blob/main/SECURITY.md">security write-up on the rtx repo&lt;/a>.&lt;/p>
&lt;p>As you can see, with Tera templating you can run some arbitrary commands (firstly in PRs/GitHub Actions, then locally if a change is merged). There is a command &lt;a href="https://github.com/jdxcode/rtx#rtx-trust-options-config_file">rtx trust&lt;/a>, meaning &amp;ldquo;rtx will parse the file with potentially dangerous
features enabled&amp;rdquo; - I guess that&amp;rsquo;d be useful if you clone some OSS repo and don&amp;rsquo;t want the tooling. There&amp;rsquo;s also configuration via environment variables, e.g. &lt;a href="https://github.com/jdxcode/rtx#rtx_trusted_config_paths">RTX_TRUSTED_CONFIG_PATHS&lt;/a> that may be useful.&lt;/p>
&lt;p>Even tools like &lt;a href="https://github.com/IdiosApps/dependabot-gradlewrapper-test#what-are-some-problems-with-the-gradle-wrapper">gradlew have risks&lt;/a> though, and that&amp;rsquo;s massively popular.&lt;/p>
&lt;p>To answer &amp;ldquo;can/should I use rtx?&amp;rdquo;, at this point you need to do your own homework ;)&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I encourage you to give &lt;a href="https://github.com/jdxcode/rtx">rtx&lt;/a> a try. It&amp;rsquo;ll be my tooling manager of choice for personal projects now, and I&amp;rsquo;m encourgaging its use at work. So far I&amp;rsquo;m using it in a backend JVM repo, a yarn/node documentation repo, and an Elixir/Erlang repo.&lt;/p></description></item><item><title>How to always know when there are PRs to check out ð®</title><status>seeding</status><link>https://james-s-w-clark.github.io/garden/github-pr-watcher/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/github-pr-watcher/</guid><description>&lt;p>A few weeks ago I heard of SwiftBar, and &lt;a href="https://xbarapp.com/">Xbar&lt;/a>:&lt;/p>
&lt;p>| Put the output from any script or program into your macOS Menu Bar&lt;/p>
&lt;p>There&amp;rsquo;s a great library of plugins on the hub, covering all sorts of topics. Want to show the weather? Show upcoming info about your favourite sports team? Check if graphics cards are in stock? It can do all of this.&lt;/p>
&lt;p>What&amp;rsquo;s also great is the fact that you can see the source code of all the plugins. You can tweak those plugins and make them your own - and it&amp;rsquo;s interesting to understand how people solved these kinds of problems.&lt;/p>
&lt;h1 id="playing-with-plugins-">Playing with plugins ð³&lt;/h1>
&lt;p>I installed a few plugins, said &amp;ldquo;wow&amp;rdquo;, and quickly realised that the Mac Pro&amp;rsquo;s camera notch is a bit annoying - you lose a fair bit of real estate for tools like this! I used &lt;a href="https://github.com/Mortennn/Dozer">Dozer&lt;/a> / &lt;a href="https://github.com/dwarvesf/hidden">Hidden&lt;/a> to get rid of a few non-essential plugins, but they take a couple icons themselves so it didn&amp;rsquo;t help much.&lt;/p>
&lt;p>This taught me that I should be as lean as possible with how many characters I display with any plugin I write. Lots of plugins stick to emojis and numbers - I agree ð¯%&lt;/p>
&lt;h1 id="how-an-xbar-plugin-works">How an xbar plugin works&lt;/h1>
&lt;p>The &lt;a href="https://github.com/matryer/xbar-plugins/blob/main/CONTRIBUTING.md">docs&lt;/a> for xbar are pretty good. There&amp;rsquo;s really two parts to a plugin: getting your data, and making xbar display it.&lt;/p>
&lt;p>To show your data, you just echo/println it. How the display is structured (icon, click-on-icon-modal, etc.) is like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># Cycle through &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;cycle-one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;cycle-two&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;cycle-three&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;---&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Next lines only visible in dropdown for this plugin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;dropdown-item1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;dropdown-item2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;--dropdown-item2-something&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;----dropdown-item2-something-yodawg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;--dropdown-item2-somethingElse&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Next item is also in dropdown, separated by horizontal bar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;---&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;dropdown-item3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="xbar_tree.jpg" width="100%"/>
&lt;/figure>
&lt;p>I think that&amp;rsquo;s far more nesting that I&amp;rsquo;d ever want to use - but it&amp;rsquo;s nice that it&amp;rsquo;s there if you want it. I guess somebody did!&lt;/p>
&lt;p>Anyway, you can put links/colours/shortcuts in there and make it clickable. You can do other stuff like have the user enter variables (&amp;lt;xbar.var&amp;gt;) for the program to access as environment variables (it can&amp;rsquo;t access your actual environment variables).&lt;/p>
&lt;p>Another key feature is deciding how often your plugin updates. The plugin filenames should have a format of {name}.{time}.{ext}, e.g. check_weather.15m.sh.&lt;/p>
&lt;h1 id="writing-an-xbar-plugin">Writing an xbar plugin&lt;/h1>
&lt;p>Lots of teams use Github PRs. xbar seemed like the perfect tool for me to monitor PRs. I&amp;rsquo;ve tried a few systems for monitoring PRs, but I&amp;rsquo;m not a fan of any of them:&lt;/p>
&lt;ul>
&lt;li>I don&amp;rsquo;t like &lt;em>email&lt;/em> spam (one more app/tab, multitasking)&lt;/li>
&lt;li>&lt;em>Chatbots&lt;/em> are either slow (quickly oudated) or spammy&lt;/li>
&lt;li>&lt;em>Manually checking the site&lt;/em> either needs a few page loads or a bookmark - either way, it&amp;rsquo;s not the smoothest experience&amp;hellip; but the problem for me is it doesn&amp;rsquo;t say in advance if there will be any information for you to act on&lt;/li>
&lt;/ul>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;p>I figured an xbar plugin would let me:&lt;/p>
&lt;ul>
&lt;li>know if I can to merge (required approval count is met, CI checks pass)&lt;/li>
&lt;li>know if I have any comments/suggestions to address&lt;/li>
&lt;li>get a count of how many PRs other people have open&lt;/li>
&lt;li>get a count of how many PRs other people need reviews on&lt;/li>
&lt;li>see if PR checks pass/fail&lt;/li>
&lt;li>do this over multiple repositories&lt;/li>
&lt;/ul>
&lt;p>Your ideology on PRs probably makes you question these goals&amp;hellip; but you can tweak plugins, and you can tweak them to match your ideologies.&lt;/p>
&lt;h1 id="writing-this-plugin-with-bash">Writing this plugin with bash&lt;/h1>
&lt;p>The Github CLI is quite powerful - it can handle a lot of complexity with a clean API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">$&amp;#34;james&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">repo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">$&amp;#34;ourOrg/ourBigRepo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">all_prs&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#00a8c8">$(&lt;/span>gh pr list --repo &lt;span style="color:#111">$repo&lt;/span>&lt;span style="color:#00a8c8">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">$all_prs&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">my_prs&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#00a8c8">$(&lt;/span>gh pr list --repo WeaponX/ourBigRepo --author &lt;span style="color:#111">$username&lt;/span>&lt;span style="color:#00a8c8">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">$my_prs&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TODO take to browser with --web&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s a lot of &lt;a href="https://cli.github.com/manual/gh_pr_list">options/args&lt;/a> you can use, and other handy commands like &lt;a href="https://cli.github.com/manual/gh_pr_status">gh pr status&lt;/a>. The CLI can natively output to json or use jq filters.&lt;/p>
&lt;p>I had a think about how I&amp;rsquo;d use this to tick off those goals, but for me it seemed easier to use a language I&amp;rsquo;m more familar with.&lt;/p>
&lt;ul>
&lt;li>node.js
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>I get higher order functions (map, filter, reduce, etc.) which can help me focus on what I want, not how to do it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>might need a global npm install of axios for making requests&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>- need to figure out how to run a node file as a bash-like file ()&lt;/del>
&lt;ul>
&lt;li>that only took a second to find out and verify - &lt;a href="https://stackoverflow.com/a/24183402/4261132">it&amp;rsquo;s pretty much what you&amp;rsquo;d expect&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scala
&lt;ul>
&lt;li>it&amp;rsquo;s the language I work with, so it&amp;rsquo;d be good to practice more&lt;/li>
&lt;li>&lt;a href="https://scala-cli.virtuslab.org/docs/guides/scripts#self-executable-scala-script">scala-cli&lt;/a> can let you write self-executable scala scripts
&lt;ul>
&lt;li>I was curious how the experience would be, so I went with this&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Of course, sticking with bash would be nice. The Github CLI could be used for simplicity, which some users may already have - or curl could be used for even fewer dependencies. I encourage anyone who finds that challenge interesting to give it a try!&lt;/p>
&lt;h1 id="writing-this-plugin-with-bash-scala">Writing this plugin with &lt;del>bash&lt;/del> Scala&lt;/h1>
&lt;p>The first question is: Node has Axios, Python has Requests&amp;hellip; but what&amp;rsquo;s nice and simple for Scala? Enter Li Haoyi&amp;rsquo;s &lt;a href="https://github.com/com-lihaoyi/requests-scala">requests-scala&lt;/a>. Let&amp;rsquo;s install &lt;a href="https://scala-cli.virtuslab.org/install">scala-cli&lt;/a> and have a try:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env -S scala-cli shebang
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>import &lt;span style="color:#111">$ivy&lt;/span>.&lt;span style="color:#d88200">`&lt;/span>com.lihaoyi::requests:0.7.1&lt;span style="color:#d88200">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import &lt;span style="color:#111">$ivy&lt;/span>.&lt;span style="color:#d88200">`&lt;/span>com.lihaoyi::ujson:2.0.0&lt;span style="color:#d88200">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>val &lt;span style="color:#111">resp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> requests.get&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;https://api.github.com/users/lihaoyi&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>val &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> ujson.read&lt;span style="color:#f92672">(&lt;/span>resp.text&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;login&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#75715e"># username&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s close, it just needs a little tweak to the suggested shebang: for my MacOs brew install, &lt;code>#!/usr/bin/env /opt/homebrew/bin/scala-cli&lt;/code> works. Scala-cli is pulling in those Ivy dependencies and using them, very nice.&lt;/p>
&lt;p>To keep the blog short, you can what I&amp;rsquo;ve got so far here: &lt;a href="https://github.com/IdiosApps/xbar-github-pr">xbar-github-pr&lt;/a>. At this time it just shows PR counts summed over multiple repositories for your PRs and others'.&lt;/p>
&lt;p>TODO - add a screenshot&amp;hellip; or maybe in the goals section to get interest earlier?&lt;/p>
&lt;p>For now it&amp;rsquo;s basic but it&amp;rsquo;s a useful gauge/reminder. It can definitely be more useful, and meet more of the &lt;a href="#goals">goals&lt;/a> we set up. At some point I&amp;rsquo;ll extend on it, make it more idiomatic, and clean it up. It&amp;rsquo;s pretty much a dirty POC at the time of writing, but nevertheless I wanted to share it.&lt;/p>
&lt;p>Also note it was written for Github Enterprise, so might need a few small tweaks to work for public repos (mostly around the URLs used). Be respectful your scripts&amp;rsquo; frequency (remember, it&amp;rsquo;s in the filename, e.g. &lt;code>github-pr-checker.1h.sc&lt;/code>)&lt;/p>
&lt;p>Writing scripts with Scala-cli was generally pleasant, and I will likely reach for it again when solving similar problems - however I couldn&amp;rsquo;t figure out how to have a great user experience. There are &lt;a href="https://scala-cli.virtuslab.org/docs/commands/setup-ide/">IDE setup docs for scala-cli&lt;/a>, which could have helped improve highlighting or autocompletion. They do acknowledge &lt;a href="https://scala-cli.virtuslab.org/docs/guides/ide/">IDE user experience could be better&lt;/a>.&lt;/p>
&lt;h1 id="but-im-on-windows--linux">But I&amp;rsquo;m on Windows / Linux&lt;/h1>
&lt;p>todo: have a look for alternatives that use plugins and thus could use this stuff too&lt;/p></description></item><item><title>Navigating multiple projects with IntelliJ &amp; MacOS</title><status>evergreen</status><link>https://james-s-w-clark.github.io/garden/intellij-project-tabs/</link><pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/intellij-project-tabs/</guid><description>&lt;p>Microservices are pretty common nowadays, and often services gets their own repo. That has pros and cons, but one of the biggest cons you see day-to-day is that navigating multiple projects in IntelliJ &lt;del>isn&amp;rsquo;t&lt;/del> wasn&amp;rsquo;t a great experience.&lt;/p>
&lt;ul>
&lt;li>Do you switch between projects/folders in &lt;strong>IntelliJ&lt;/strong>?&lt;/li>
&lt;li>Do you hate janky, slow UI reloads when switching projects?&lt;/li>
&lt;li>Are you on &lt;strong>MacOS&lt;/strong>, and are on (or can get to) Big Sur or later?&lt;/li>
&lt;/ul>
&lt;p>If you answered yes to all of these questions, this post will interest you. Your IntelliJ can look like this:&lt;/p>
&lt;figure>&lt;img src="intellij_project_tabs.jpg" width="100%"/>
&lt;/figure>
&lt;p>You can even close/re-order tabs ð&lt;/p>
&lt;h1 id="how-do-i-get-this-setup">How do I get this setup?&lt;/h1>
&lt;p>According to JetBrains, &lt;a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360010142139/comments/360002541180">this is a Big Sur only IntelliJ feature&lt;/a>. I guess it should also work on other JetBrains products, like WebStorm or PyCharm.&lt;/p>
&lt;ul>
&lt;li>Go to IntelliJ&amp;rsquo;s preferences&lt;/li>
&lt;li>Go to Appearance &amp;amp; behaviour, then System Settings&lt;/li>
&lt;li>Choose &amp;ldquo;New window&amp;rdquo; or &amp;ldquo;Ask&amp;rdquo; (it&amp;rsquo;s counter intuitive, I know!)
&lt;ul>
&lt;li>If you choose &amp;ldquo;Ask&amp;rdquo; and want a project to appear as a tab, choose &amp;ldquo;New window&amp;rdquo; in the popup dialogue when you open a project&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="intellij_preferences.jpg" width="100%"/>
&lt;/figure>
&lt;ul>
&lt;li>Go to MacOS System Settings&lt;/li>
&lt;li>Go to General&lt;/li>
&lt;li>Choose &amp;ldquo;always&amp;rdquo; for Prefer tabs&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="macos_general_settings.jpg" width="100%"/>
&lt;/figure>
&lt;h1 id="closing-notes">Closing notes&lt;/h1>
&lt;ul>
&lt;li>Thanks to a few Stack Overflow posts/answers/comments &lt;a href="https://stackoverflow.com/a/65451682/4261132">1&lt;/a>, &lt;a href="https://stackoverflow.com/a/69350085/4261132">2&lt;/a>, &lt;a href="https://stackoverflow.com/a/71495096/4261132">3&lt;/a>. They helped clarify how the confusing setup should be done.&lt;/li>
&lt;li>Don&amp;rsquo;t question why my default browser is Microsoft Edge&lt;/li>
&lt;/ul></description></item></channel></rss>
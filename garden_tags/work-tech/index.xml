<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>work, tech on James' Digital Garden</title><link>https://james-s-w-clark.github.io/garden_tags/work-tech/</link><description>Recent content in work, tech on James' Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>James Clark ©</copyright><lastBuildDate>Tue, 06 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://james-s-w-clark.github.io/garden_tags/work-tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Career - Disney Streaming - What I Done</title><status>seeding</status><link>https://james-s-w-clark.github.io/garden/disney-what-i-done/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://james-s-w-clark.github.io/garden/disney-what-i-done/</guid><description>&lt;p>Outside of usual sprint project work (Scala Functional Programming microservices), I enjoyed dabbling with different bits of tech and ideas (mostly tech/way of working related) in my time at Disney Streaming so far!&lt;/p>
&lt;h1 id="migrating-our-team-to-kubernetes">Migrating our team to Kubernetes&lt;/h1>
&lt;p>We were running our applications on a bespoke ECS-like platform - which worked fairly well, apart from deployments regularly failing due to nodes being too small to fit pods onto. It has health checks, self-healing properties, etc. like Kubernetes - but you can&amp;rsquo;t easily &lt;code>ssh&lt;/code> into pods even in non-prod environments easily. There&amp;rsquo;s more reasons for the move, but basically there&amp;rsquo;s a company-wide effort to move to EKS.&lt;/p>
&lt;p>I loved using Kubernetes (with k9s!) at Sainsbury&amp;rsquo;s, so I volunteered to lead this migration project for our team. Here&amp;rsquo;s some things I learned whilst leading this:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A shared knowledge base such as Google Docs works great. We captured key meeting notes, decisions, diagrams, etc. here.&lt;/p>
&lt;ul>
&lt;li>Anyone can get up to speed quickly&lt;/li>
&lt;li>Easy to ask questions, add comments&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Creating a &amp;ldquo;team training Slack channel&amp;rdquo; for a new tech domain works great&lt;/p>
&lt;ul>
&lt;li>As you work through the training, questions, problems, and solutions crystallise&lt;/li>
&lt;li>All information is contained neatly in the channel, not spread all over various places
&lt;ul>
&lt;li>It&amp;rsquo;s easier to collate key points and give feedback to the course owners&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You can expand the channel beyond just your team, sharing the benefits&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>For real-time knowledge sharing, encourage various people to take tickets on the work. Pair with them for smooth KT&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In refinement, it can be great to call out a ticket as a pairing ticket - a &amp;ldquo;🍐&amp;rdquo; emoji in the title is a nice reminder that some felt they had something new to learn from it&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I also wrote a popular internal blog post for our organisation about how to use &lt;a href="https://k9scli.io/">&lt;code>k9s&lt;/code>&lt;/a>, with specific instructions for a frictionless walk-through.&lt;/p>
&lt;h1 id="ci-jenkins">CI (Jenkins)&lt;/h1>
&lt;ul>
&lt;li>Consider adding a &amp;ldquo;notes&amp;rdquo; text parameter to some builds. Even if you don&amp;rsquo;t update the build description with this, it can be very useful to know why some builds were run (e.g. manual perf testing of a branch - what change, what is expected)&lt;/li>
&lt;li>For performance tests, put time-stamped links to observability platforms (DataDog, Grafana, etc.) in the output - it really helps the ergonomics of diagnosing any issues. Lower barrier to entry helps keep performance high!&lt;/li>
&lt;li>Be mindful of how many messages you&amp;rsquo;re sending to Slack, and where. If there&amp;rsquo;s just a little traffic, it can go to a visible team chat. If it&amp;rsquo;s noisy, it&amp;rsquo;ll probably go to a chat where people don&amp;rsquo;t look as often!&lt;/li>
&lt;li>For parameters, be explicit - say &lt;code>3600&lt;/code> for the &lt;code>default&lt;/code> seconds run time, rather than &lt;code>default&lt;/code> then loading in the number based on that string&lt;/li>
&lt;/ul>
&lt;h1 id="ci-github-actions">CI (GitHub Actions)&lt;/h1>
&lt;p>Apart from linting, auto-fixing, formatting, etc. there are some really cool things you can do with GHA and GH&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Have a fairly complex/tedious workflow for e.g. building docker images and performance testing them on a branch? Use ChatOps to listen to a command and let an Action do it for you&lt;/p>
&lt;ul>
&lt;li>It can reply with a comment, linking to the builds, perf tests, dashboards, etc.&lt;/li>
&lt;li>It can describe what process it is doing, for more explicit documentation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Use Chinthakagodawita&amp;rsquo;s &lt;a href="https://github.com/chinthakagodawita/autoupdate">autoupdate&lt;/a> action to keep PR&amp;rsquo;s up-to-date with the &lt;code>main&lt;/code> branch&lt;/p>
&lt;ul>
&lt;li>If you have &lt;code>auto merge&lt;/code> enabled, you can use the &lt;code>PR_FILTER&lt;/code> of &lt;code>auto_merge&lt;/code>
&lt;ul>
&lt;li>Done reviewing 5 PRs? Hit auto merge on them, and this will keep them merging until they&amp;rsquo;re all done!&lt;/li>
&lt;li>Without this, you&amp;rsquo;d have to wait and press &amp;ldquo;merge from main&amp;rdquo; four times. That could be like 10-30 minutes being distracted!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Open source contributions:&lt;/p>
&lt;ul>
&lt;li>Coursier&amp;rsquo;s &lt;code>setup-action&lt;/code> is &amp;ldquo;A GitHub Action to install Coursier and use it to install Java and Scala CLI tools.&amp;rdquo;. It can set up various Java verisons and distributions.
&lt;ul>
&lt;li>We use Amazon Corretto at work, and AWS. I [added Corretto to the jvm-index repo](&lt;a href="https://github.com/coursier/setup-action">https://github.com/coursier/setup-action&lt;/a> &lt;a href="https://github.com/coursier/jvm-index/blob/master/src/Corretto.scala)">https://github.com/coursier/jvm-index/blob/master/src/Corretto.scala)&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="docusaurus">Docusaurus&lt;/h1>
&lt;p>I was familiar with Hugo&amp;rsquo;s Doks static site generator, and was happy to try a new SSG here: Docusaurus.&lt;/p>
&lt;p>We were on Docusaurus 1, and we had a lot of complexity with the sidebar, document ordering, couldn&amp;rsquo;t use cool new plugins, etc. - so I was happy to simplify things and upgrade us to Docusuaurs 2. Here&amp;rsquo;s a few tips:&lt;/p>
&lt;ul>
&lt;li>Set up &lt;a href="https://github.com/marketplace/actions/deploy-pr-preview">PR preview&lt;/a>, so non-developers can see what their changes look like
&lt;ul>
&lt;li>You might need to &amp;ldquo;recreate&amp;rdquo; the Action from scratch to avoid nesting (it&amp;rsquo;s a composite action) - see &lt;a href="https://github.com/rossjrw/pr-preview-action/issues/33">this issue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Consider adding comments to your site, so people can reach out with the context directly above. &lt;a href="https://utteranc.es/">utteranc.es&lt;/a> can help with this&lt;/li>
&lt;li>Add light/dark src/css/custom.css to match the rest of your project&amp;rsquo;s branding&lt;/li>
&lt;li>For user-facing documentation, add a FAQ page. This could save a lot of time helping resolve confusion on your most common questions!&lt;/li>
&lt;li>When choosing document order, set weights like 0, 10, and 20. If you set 0, 1, and 2 then you can&amp;rsquo;t insert a document between any of them without changing many files. With the former setup, you can set &amp;ldquo;15&amp;rdquo; to get between 10 and 20.&lt;/li>
&lt;/ul>
&lt;h2 id="text-search-in-docusaurus">Text search in Docusaurus&lt;/h2>
&lt;p>I also added text search, to help our users navigate straight to what their looking for - without having to look through the structure of our sidebar. I did this as a spike for fun on a &amp;ldquo;learning Friday&amp;rdquo; - and when it was nearly ready, our users were excited for it - it was apparently quite a headache for them. Once I figured it out, it was really simple! I &lt;a href="https://github.com/cmfcmf/docusaurus-search-local/commit/f169f9acc9fd44d7963f6e732466ba6cd38e6ce9">raised documentation&lt;/a> for this to make it easier for other people to get up to speed quickly with it too.&lt;/p>
&lt;p>package.json adds e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d88200">&amp;#34;dependencies&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@cmfcmf/docusaurus-search-local&amp;#34;&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;^0.11.0&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>docusaurus.config.js adds e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">plugins&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#75af00">require&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">resolve&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;@cmfcmf/docusaurus-search-local&amp;#34;&lt;/span>&lt;span style="color:#111">)],&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To see it locally, do &lt;code>yarn build&lt;/code> and &lt;code>yarn serve&lt;/code>. These make a production-like version of your site. &lt;code>yarn run dev&lt;/code> does not integrate most of the search plugins (the search index is built on build only)&lt;/p>
&lt;p>There&amp;rsquo;s also &lt;a href="https://github.com/easyops-cn/docusaurus-search-local">https://github.com/easyops-cn/docusaurus-search-local&lt;/a> if you need it to be local/static.
Algolia is popular, but it needs a server.
See more &lt;a href="https://docusaurus.io/docs/search">in the Docusaurus docs&lt;/a>&lt;/p>
&lt;h1 id="meetings">Meetings&lt;/h1>
&lt;ul>
&lt;li>Enable closed captions
&lt;ul>
&lt;li>Having the auto-generated subtitles should be accurate enough to help some of your team follow the conversation&lt;/li>
&lt;li>If the auto-generated subtitles are garbage, you probably need to spend some budget on upgrading microphones. If the computer can&amp;rsquo;t understand you, maybe humans are having an issue too!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="calendar">Calendar&lt;/h1>
&lt;ul>
&lt;li>If a meeting is recorded, but a link to the recording in the invite. It gives a real home to the recording, rather than just a Slack message that gets lost. Helpful for people coming back from holiday/sickness - can flick through Calendar and get straight into the meetings they need to catch up on&lt;/li>
&lt;/ul>
&lt;h1 id="build-caching">Build caching&lt;/h1>
&lt;p>Compiling your apps from scratch every time is a waste of time &amp;amp; energy.
Some build tools support delta/partial compilation - if only 1 file in 1000 changed, we can base our compile around that.
GitHub Actions has a few options for caching dependencies, e.g. &lt;a href="https://github.com/actions/cache">https://github.com/actions/cache&lt;/a> or &lt;a href="https://github.com/coursier/cache-action">https://github.com/coursier/cache-action&lt;/a>. That &lt;em>could&lt;/em> help a little.
Some build tools have a remote cache - that&amp;rsquo;s great for quicker builds on CI. But, if you don&amp;rsquo;t have a remote cache - what can you do?&lt;/p>
&lt;p>Our team uses our own &lt;code>mill&lt;/code> build tool container. It already ran some basic checks to check it&amp;rsquo;d work with our project and could initialise some &amp;ldquo;workers&amp;rdquo; - but didn&amp;rsquo;t do any caching. Here&amp;rsquo;s what I did:&lt;/p>
&lt;ul>
&lt;li>Use a wrapper &lt;code>millw&lt;/code>, a bit like &lt;code>gradlew&lt;/code>. This would allow the container to build for any &lt;code>.mill-version&lt;/code>, by downloading the necessary tooling
&lt;ul>
&lt;li>If we merge a build tool upgrade in our main repo, builds would still work without requiring a manual rebuild on the new version of this image. Not technically efficient due to the redownloads of the build tool, but ultimately removing some toil in making things a little smoother for humans.&lt;/li>
&lt;li>Compile, check formatting, fixing, etc. to generate these outputs in &lt;code>out&lt;/code>, as well as downloading dependencies&lt;/li>
&lt;li>To prevent being over-written, run &lt;code>mv /root/build/out /root/out-cache&lt;/code>. In Jenkins jobs for app builds, move this cache back (if the build is parameterised with using the cache). Dependencies cache doesn&amp;rsquo;t need moving.&lt;/li>
&lt;li>The cache doesn&amp;rsquo;t have to be used. It adds some size, but storage is cheap and saved time/energy is valuable. We use it for PR builds (not &lt;code>main&lt;/code> - that&amp;rsquo;s clean), and&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The outcome of this is that, several minutes are shaved off each module (more or less, each microservice) build time. &lt;em>Faster PR compilations means faster PR checks, which means delivering value faster and reducing our mean time to recovery.&lt;/em> It also means faster builds for ChatOps triggering branch builds + perf tests, giving fast feedback on performance critical code changes!&lt;/p>
&lt;figure>&lt;img src="build-cache.webp"
alt="Can you guess which builds are using the cache?" width="100%"/>&lt;figcaption>
&lt;p>Can you guess which builds are using the cache?&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>I was pleased with doing this, as using &lt;code>deltas&lt;/code> like this has seemed awesome to me for a long time. I was amazed as a teenager when one Android custom ROM could deliver OTA updates 10x smaller than anyone else, by using deltas.&lt;/p>
&lt;h1 id="performance-tests">Performance tests&lt;/h1>
&lt;p>In your performance testing platform (we use Gatling), consider what types of test you want to have, and what should be compared:&lt;/p>
&lt;ul>
&lt;li>nightly, load (main)
&lt;ul>
&lt;li>I made them run for longer (why not? nobody is manually testing on the &lt;code>perf&lt;/code> env at 3am)&lt;/li>
&lt;li>I made them run at peak RPS for 75% of the run time (configurable). Previously, only about 20% of the time was at peak RPS. Choose a traffic shape gives your services a proper workout!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>soak (main)
&lt;ul>
&lt;li>Have seen dependencies clash and lead to slow memory leaks; soak tests protect us from this, run over the weekend&lt;/li>
&lt;li>I oversaw various performance test changes around this time after identifying improvements with the team in a post-mortem.&lt;/li>
&lt;li>Here, we basically decrease the load a little bit (75% of nightly) and run for much longer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>load (branch)
&lt;ul>
&lt;li>results could be very far from average results on &lt;code>main&lt;/code>, so have separate simulation to keep your &amp;ldquo;usually good&amp;rdquo; simulations clean&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>You can try different traffic shapes, e.g. a triangle wave over a day to simulate real traffic variety. How does your app perform as load varies?&lt;/p>
&lt;p>We previously sent the reports to Slack, with pass/fail and the targets. I added time-stamped hyperlinks to observability dashboards for ergonomics.&lt;/p>
&lt;h1 id="git-hooks">Git hooks&lt;/h1>
&lt;p>Git hooks are great - ensure your code is linted/compilable/tested before pushing.
What&amp;rsquo;s even cooler is combining them with interactive CLI tooling like &lt;code>gum&lt;/code> - see my &lt;a href="https://github.com/IdiosApps/gummy-hooks">&amp;ldquo;gummy hooks&amp;rdquo;&lt;/a> examples.&lt;/p>
&lt;ul>
&lt;li>Iterate quicker by using a bash script and just calling it - you don&amp;rsquo;t actually have to do anything with Git to iterate on it.&lt;/li>
&lt;/ul>
&lt;h1 id="scala-steward">Scala Steward&lt;/h1>
&lt;h2 id="not-receiving-updates">Not receiving updates&lt;/h2>
&lt;p>For Scala, a common tool for getting dependency upgrades (and new Scala versions!) is &lt;a href="https://github.com/scala-steward-org/scala-steward">Scala Steward&lt;/a>.
For about half a year, only a few of our dependencies were getting updates. You may remember when Log4j had multiple security vulnerabilities (and corresponding patches) within about one week, in December 2021. This one &lt;em>was&lt;/em> patched automatically. A few other dependencies weren&amp;rsquo;t being updated (note: I never saw security issues, or if we did we&amp;rsquo;d patch manually).&lt;/p>
&lt;p>We were extracting a version and interpolating with it.
The fix here was to declare each dependency and its version on its own line. It didn&amp;rsquo;t really make PRs harder to review, and is even a bit clearer in a PR to show you what really changed.&lt;/p>
&lt;p>If you&amp;rsquo;re not getting updates with Scala Steward, that might be something to look into!&lt;/p>
&lt;h2 id="not-receiving-updates-20-failed-to-decode-modules">Not receiving updates&amp;hellip; 2.0: &lt;code>Failed to decode Modules&lt;/code>&lt;/h2>
&lt;p>If you have a big &lt;code>Mill&lt;/code> Scala project (let&amp;rsquo;s say, a monorepo - with about 10 modules) and fair number of dependencies - you might be seeing this problem.&lt;/p>
&lt;p>I ran a local clone of Steward with a teammate, adding some print-lines to diagnose the parser. We saw the input string for parsing was blank for our project. Looking at &lt;code>MillAlg.scala&lt;/code>, we saw about &lt;a href="https://github.com/scala-steward-org/scala-steward/pull/2717">5000 lines of the &lt;em>end&lt;/em> of a JSON object&lt;/a>. The default buffer is 8192 bytes. Increasing the CLI argument &lt;a href="https://github.com/scala-steward-org/scala-steward/pull/1829">&lt;code>--max-buffer-size&lt;/code>&lt;/a> to &lt;code>32768&lt;/code> fixed the issue for us. The author also raised a &lt;a href="https://github.com/scala-steward-org/scala-steward/pull/2940">PR&lt;/a> to give a more obvious error about this, instead of returning some partial JSON.&lt;/p>
&lt;h1 id="kinesis">Kinesis&lt;/h1>
&lt;p>With Kinesis, we were getting hundreds of thousands of errors per week -&lt;code>[metrics_manager.cc:145] Metrics upload failed&lt;/code>- giving a very bad signal:noise ratio in our DataDog logs.&lt;/p>
&lt;p>We only use metrics at the &amp;ldquo;stream&amp;rdquo; level, rather than the &amp;ldquo;shard&amp;rdquo; level (a stream has many shards, and shards can sometimes report no data &amp;amp; error).&lt;/p>
&lt;p>On a &lt;code>KinesisProducerConfiguration&lt;/code>, do &lt;code>.setMetricsGranularity(&amp;quot;stream&amp;quot;)&lt;/code>. The default level is &amp;ldquo;shard&amp;rdquo;.&lt;/p>
&lt;p>Also be mindful of costs. The Javadocs state that two shards with two streams each will produce &lt;em>seven&lt;/em> CloudWatch metrics (4x shard, 2x stream, 1 global).&lt;/p>
&lt;p>AWS support was not so helpful with this error (&lt;a href="https://github.com/awslabs/amazon-kinesis-producer/issues/188#issuecomment-557198786">essentially saying: &amp;ldquo;it&amp;rsquo;s a known issue, but please work around it by filtering out the logs&amp;rdquo;&lt;/a>) - setting a more accurate configuration is better, and I &lt;a href="https://github.com/awslabs/amazon-kinesis-producer/issues/188#issuecomment-1189202115">shared our recommendation on the issue&lt;/a>.&lt;/p>
&lt;h1 id="on-call">On-call&lt;/h1>
&lt;p>With good tests (unit, integration, end-to-end, performance, etc.), you won&amp;rsquo;t get called out much and it might be worth the extra pay bump + other perks :)&lt;/p>
&lt;h1 id="gh-cli---downloading-files--using-in-github-actions">&lt;code>gh&lt;/code> CLI - downloading files, &amp;amp; using in GitHub Actions&lt;/h1>
&lt;p>&lt;code>curl $(gh api $URL_TO_FILE_ON_GITHUB) --jq .download_url) -o ./path/to/download.ext&lt;/code>&lt;/p>
&lt;p>If you install the &lt;code>gh&lt;/code> CLI on you GitHub Action runners too, it can be a nice way to interact with your GitHub (enterprise works too!). You just need to &lt;a href="https://josh-ops.com/posts/gh-auth-login-in-actions/">set the enterprise token and GitHub Host as env variables&lt;/a>.&lt;/p></description></item></channel></rss>